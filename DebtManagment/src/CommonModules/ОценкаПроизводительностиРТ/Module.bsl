////////////////////////////////////////////////////////////////////////////////
// ОценкаПроизводительностиРТ содержит процедуры и функции 
// для оценки производительности.
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Функция ПроверитьНеобходимостьРегистрацииЗамеров(Событие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КлючевыеОперации.Ссылка КАК Ссылка,
	|	НастройкиКлючевыхОпераций.Использовать КАК Использовать
	|ИЗ
	|	Справочник.КлючевыеОперации КАК КлючевыеОперации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиКлючевыхОпераций КАК НастройкиКлючевыхОпераций
	|		ПО КлючевыеОперации.Ссылка = НастройкиКлючевыхОпераций.КлючеваяОперация
	|ГДЕ
	|	КлючевыеОперации.ИмяХеш = &ИмяХеш
	|	И НастройкиКлючевыхОпераций.Использовать
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	ХешMD5 = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешMD5.Добавить(Событие);
	ИмяХеш = ХешMD5.ХешСумма;
	ИмяХеш = СтрЗаменить(Строка(ИмяХеш), " ", "");
	Запрос.УстановитьПараметр("ИмяХеш", ИмяХеш);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

Процедура ВыполнитьЗамерОценкиПроизводительностиСправочниковПередЗаписью(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	
	Событие = Строка(Источник.Ссылка.Метаданные().ПолноеИмя()) +".Запись";
	Если  Не ПроверитьНеобходимостьРегистрацииЗамеров(Событие) Тогда
		
		ВремяНачалаЗамера =  ОценкаПроизводительности.НачатьЗамерВремени();
		
		Параметры = Новый Структура;
		Параметры.Вставить("Событие",           Событие);
		Параметры.Вставить("ВремяНачалаЗамера", ВремяНачалаЗамера); 
		
		Источник.ДополнительныеСвойства.Вставить("ПараметрыЗамера", Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершитьВыполнениеЗамераОценкиПроизводительностиСправочниковПриЗаписи(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры = Неопределено;
	
	Источник.ДополнительныеСвойства.Свойство("ПараметрыЗамера", Параметры);
	
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		ОценкаПроизводительности.ЗакончитьЗамерВремени(Параметры.Событие, 
		Параметры.ВремяНачалаЗамера); 
	КонецЕсли;    
	
КонецПроцедуры

Процедура ВыполнитьЗамерОценкиПроизводительностиДокументовПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Событие = Строка(Источник.Ссылка.Метаданные().ПолноеИмя()) +".ФормаДокумента.Запись";
	
	Если Не ПроверитьНеобходимостьРегистрацииЗамеров(Событие) Тогда
		
		ВремяНачалаЗамера =  ОценкаПроизводительности.НачатьЗамерВремени();
		
		Параметры = Новый Структура;
		Параметры.Вставить("Событие", Событие);
		Параметры.Вставить("ВремяНачалаЗамера", ВремяНачалаЗамера);
		
		Источник.ДополнительныеСвойства.Вставить("ПараметрыЗамера", Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершитьВыполнениеЗамераОценкиПроизводительностиДокументовПриЗаписи(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры = Неопределено;
	
	Источник.ДополнительныеСвойства.Свойство("ПараметрыЗамера", Параметры);
	
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		ОценкаПроизводительности.ЗакончитьЗамерВремени(Параметры.Событие, 
		Параметры.ВремяНачалаЗамера); 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти