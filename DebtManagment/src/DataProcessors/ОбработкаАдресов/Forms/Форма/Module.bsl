
&НаСервере
Процедура ЗаполнитьНаСервере()
	// Вставить содержимое обработчика. 
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДолжникиКонтактнаяИнформация.Ссылка КАК Должник,
		|	ДолжникиКонтактнаяИнформация.Вид КАК ВидАдреса,
		|	ДолжникиКонтактнаяИнформация.Представление КАК Представление,
		|	ДолжникиКонтактнаяИнформация.Значение КАК Значение,
		|	ДолжникиКонтактнаяИнформация.НомерСтроки КАК НомерСтроки,
		|	ДолжникиКонтактнаяИнформация.Адрес КАК Адрес
		|ИЗ
		|	Справочник.Должники.КонтактнаяИнформация КАК ДолжникиКонтактнаяИнформация";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаАдресов.Загрузить(РезультатЗапроса);
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьНаСервере();
КонецПроцедуры


&НаСервере
Процедура ПроверитьНаСервере()
	// Вставить содержимое обработчика.
	 ПроверитьАдресаСоЗначениями();
	ПривестиАдресаКФИАС();
 
//	Сообщить(РезультатПроверки);
КонецПроцедуры   

&НаСервере
Процедура ПривестиАдресаКФИАС()
	  Для Каждого Ст из ТаблицаАдресов цикл
		  Если Не Ст.АдресКорректен тогда 
			Результат =УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияПоПредставлению(Ст.Представление, Перечисления.ТипыКонтактнойИнформации.Адрес);	  
			ВидКИ = УправлениеКонтактнойИнформациейСлужебный.СтруктураВидаКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.РегистрацииАдресДолжника);
            РезультатПроверки = Обработки.РасширенныйВводКонтактнойИнформации.ОшибкиЗаполненияАдресаXDTO(Результат, ВидКИ);
            ОбработатьРезультатПроверки(Ст,РезультатПроверки);
		//	Сообщить(Результат);
		  КонецЕсли; 
	 КонецЦикла; 
	

КонецПроцедуры	
&НаСервере
Процедура ПроверитьАдресаСоЗначениями()

	Для Каждого Ст из ТаблицаАдресов цикл
		Если ЗначениеЗаполнено(Ст.Значение) тогда
			//Соответствие.Вставить(Ст.НОмерСтроки,Ст.Значение);			
			ВидКИ = УправлениеКонтактнойИнформациейСлужебный.СтруктураВидаКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.РегистрацииАдресДолжника);
			Результат = Обработки.РасширенныйВводКонтактнойИнформации.ОшибкиЗаполненияАдресаXDTO(Ст.Значение, ВидКИ);
			ОбработатьРезультатПроверки(Ст,Результат);
			
		КонецЕсли;	
	КонецЦикла; 
	

КонецПроцедуры

&НаСервере
Функция ОбработатьРезультатПроверки(СтДанных, Результат)
	Если Результат.Количество()=0 тогда
		СтДанных.АдресКорректен = Истина;
		
	ИначеЕсли (Результат.Количество()=1) и (Результат[0].ИмяПоля="Дом") тогда
		СтДанных.АдресКорректен = Истина;
	    СтДанных.ЕстьПредупреждения =Истина; 
			Для Каждого Элемент из Результат цикл
		НоваяОшибка = ТаблицаОшибок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяОшибка,Элемент);
		НоваяОшибка.Ключ=СтДанных.ПолучитьИдентификатор();
	КонецЦикла;	
	иначе
		СтДанных.ЕстьОшибки = Истина;		
	Для Каждого Элемент из Результат цикл
		НоваяОшибка = ТаблицаОшибок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяОшибка,Элемент);
		НоваяОшибка.Ключ=СтДанных.ПолучитьИдентификатор();
	КонецЦикла;	
	КонецЕсли;	
	
КонецФункции // ОбработатьРезультатПроверки()


&НаКлиенте
Процедура Проверить(Команда)
	ПроверитьНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаАдресовПриАктивизацииСтроки(Элемент)
	// Вставить содержимое обработчика.   
	//Если Элементы.ТаблицаАдресов.ТекущаяСтрока<>НЕопр
	Элементы.ТаблицаОшибок.ОтборСтрок =Новый ФиксированнаяСтруктура("Ключ", Элементы.ТаблицаАдресов.ТекущаяСтрока); 	
КонецПроцедуры


&НаСервере
Процедура СоздатьАдресаНаСервере()
	// Вставить содержимое обработчика.
	Для Каждого Ст из ТаблицаАдресов цикл
		Если Ст.АдресКорректен и ( Не  ЗначениеЗаполнено(Ст.Адрес)) тогда
				КонтактнаяИнформацияJSON=СтрЗаменить(Ст.Значение,"¶","");
				КонтактнаяИнформация = УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(КонтактнаяИнформацияJSON, Перечисления.ТипыКонтактнойИнформации.Адрес);
				СсылкаНаАдрес = СоздатьЗаполнитьАдреса(КонтактнаяИнформация); 
		Если СсылкаНаАдрес<>Неопределено тогда
			СпрДолжникОбъект = Ст.Должник.ПолучитьОбъект();
			СпрДолжникОбъект.КонтактнаяИнформация[Ст.НомерСтроки-1].Адрес= СсылкаНаАдрес;
			СпрДолжникОбъект.Записать();  
			Ст.Адрес=СсылкаНаАдрес;
			//Сообщить("Записан объект "+СпрДолжникОбъект.Ссылка);
		КонецЕсли;	

		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры


&НаКлиенте
Процедура СоздатьАдреса(Команда)
	СоздатьАдресаНаСервере();
КонецПроцедуры   

&НаСервере
Функция СоздатьЗаполнитьАдреса(КонтактнаяИнформация)   
	//Нашли дом	
	если ЗначениеЗаполнено(КонтактнаяИнформация.Houseid) тогда
		Сообщить("Houseid заполнен ищем по нему");	
		СсылкаДом=НайтиОбъектПОИдентификатору(КонтактнаяИнформация.Houseid);
		если СсылкаДом<>Неопределено тогда     
			Сообщить("Houseid Найден возвращаем его");
			Возврат СсылкаДом;
		Конецесли;	
	иначеесли Не ЗначениеЗаполнено(КонтактнаяИнформация.houseNumber) тогда
		//
			Сообщить("Houseid не заполнен и нет информации о доме");
			Сообщить("НЕ НАШЛИ");
		Возврат Неопределено;
	КонецЕсли;	
	//Ищем улицу
	если ЗначениеЗаполнено(КонтактнаяИнформация.streetId) тогда
		Сообщить("streetId заполнен ищем по нему");	
		СсылкаУлица=НайтиОбъектПОИдентификатору(КонтактнаяИнформация.streetId);
	    если СсылкаУлица<>Неопределено тогда     
			Сообщить("Улица найдена");
			СсылкаДом =СоздатьВернутьДом(СсылкаУлица,КонтактнаяИнформация.Houseid,КонтактнаяИнформация.houseNumber, КонтактнаяИнформация.HouseType);
			Сообщить("Создан НОВЫЙ ДОМ.");;
			Возврат СсылкаДом;
		иначе
			Сообщить("Улица НЕ найдена. Ищем создаем родительские элементы");
			СсылкаУлица =СоздатьНайтиРодительскиеЭлементы(КонтактнаяИнформация.streetId);
			СоздатьЗаполнитьАдреса(КонтактнаяИнформация);
		Конецесли;
	иначе
		Сообщить("ОШИБКА streetId  НЕ заполнен!!!");		
		Возврат Неопределено;
	КонецЕсли;	
	//Сообщить(КонтактнаяИнформация.Houseid);	 
	Возврат Неопределено;
КонецФункции  

&НаСервере
Функция СоздатьНайтиРодительскиеЭлементы(Идентификатор)
	
	//1 Ищем в ФИАС данные по  Идентификатор
	ДанныеАдреса= НайтДанныеИЗФИАС(Идентификатор);
	Если ДанныеАдреса<>Неопределено тогда
		Сообщить("Ищем данные по родителю в АДРЕСА"+ДанныеАдреса.Наименование); 
		Если ДанныеАдреса.РодительскийИдентификатор= ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор() тогда
		Сообщить("Родительский адрес ВЕРХНЕГО УРОВНЯ");	
		СпрАдрес=СпрСоздатьВернутьАдрес(Справочники.Адреса.ПустаяСсылка(),ДанныеАдреса);
		Возврат СпрАдрес; 

		Конецесли;	
		НайденныйАдрес=НайтиОбъектПОИдентификатору(ДанныеАдреса.РодительскийИдентификатор);
		Если НайденныйАдрес<>Неопределено тогда
				Сообщить("Нашли РОДИТЕЛЯ "+НайденныйАдрес.Наименование);
				СпрАдрес=СпрСоздатьВернутьАдрес(НайденныйАдрес,ДанныеАдреса);
				Возврат СпрАдрес; 
		иначе
			Возврат СоздатьНайтиРодительскиеЭлементы(ДанныеАдреса.РодительскийИдентификатор)	
		КонецЕсли;	
	КонецЕсли;	
	
КонецФункции

&НаСервере
Функция  СпрСоздатьВернутьАдрес(Родитель,ДанныеАдреса)
   СпрАдрес=Справочники.Адреса.СоздатьЭлемент();
   ЗаполнитьЗначенияСвойств( СпрАдрес,ДанныеАдреса);
   СпрАдрес.Родитель = Родитель;
   СпрАдрес.Записать();    
   Сообщить("Создан адрес "+СпрАдрес.Наименование);
   Возврат СпрАдрес.Ссылка;
	
КонецФункции	

&НаСервере	
Функция НайтДанныеИЗФИАС(Идентификатор)
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АдресныеОбъекты.Идентификатор КАК Идентификатор,
		|	АдресныеОбъекты.КодСубъектаРФ КАК КодСубъектаРФ,
		|	АдресныеОбъекты.РодительскийИдентификатор КАК РодительскийИдентификатор,
		|	АдресныеОбъекты.МуниципальныйРодительскийИдентификатор КАК МуниципальныйРодительскийИдентификатор,
		|	АдресныеОбъекты.Наименование КАК Наименование,
		|	АдресныеОбъекты.Сокращение КАК Сокращение,
		|	АдресныеОбъекты.КодКЛАДР КАК КодКЛАДР,
		|	АдресныеОбъекты.ДополнительныеАдресныеСведения КАК ДополнительныеАдресныеСведения,
		|	АдресныеОбъекты.Уровень КАК Уровень
		|ИЗ
		|	РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
		|ГДЕ
		|	АдресныеОбъекты.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий()тогда
			Сообщить("Нашли объект с идентификатором "+Идентификатор);

		Возврат ВыборкаДетальныеЗаписи;
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	КонецЕсли;                         
	//
	Сообщить("Не нашли объект с идентификатором "+Идентификатор);
	Возврат Неопределено
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецФункции	

&НаСервере
Функция СоздатьВернутьДом(Улица,Houseid,houseNumber, HouseType)
	    СпрДом= НайтиДомНаУлицеПоНомеру(Улица,houseNumber) ;
		Если СпрДом<>Неопределено тогда
			Возврат СпрДом;
		КонецЕсли;	

	    СпрДом =Справочники.Адреса.СоздатьЭлемент();
		Если Houseid="" тогда
		СпрДом.Идентификатор = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор();
	иначе                                                             
		СпрДом.Идентификатор = Новый УникальныйИдентификатор(Houseid);
		КонецЕсли;
		СпрДом.Родитель =Улица;
		СпрДом.РодительскийИдентификатор =Улица.Идентификатор;
		СпрДом.Сокращение =HouseType;
		СпрДом.Наименование =houseNumber;
		СпрДом.Уровень =8;
		СпрДом.КодСубъектаРФ=Улица.КодСубъектаРФ;
		СпрДом.Записать();
		возврат СпрДом.Ссылка;
КонецФункции	

&НаСервере
Функция НайтиДомНаУлицеПоНомеру(Улица,houseNumber) 
	  	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Адреса.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Адреса КАК Адреса
		|ГДЕ
		|	Адреса.Родитель = &Улица
		|	И Адреса.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", houseNumber);
	Запрос.УстановитьПараметр("Улица", Улица);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий()тогда
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Возврат ВыборкаДетальныеЗаписи.ссылка;
	КонецЕсли;                        
	Возврат Неопределено;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
КонецФункции
	
&НаСервере
фУНКЦИЯ НайтиОбъектПОИдентификатору(Идентификатор)
	       	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Адреса.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Адреса КАК Адреса
		|ГДЕ
		|	Адреса.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() тогда
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Конецесли;
	Возврат Неопределено;	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецФункции



   //УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияПоПредставлению(АдресСтрокой, Перечисления.ТипыКонтактнойИнформации.Адрес);