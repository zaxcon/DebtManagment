
&НаКлиенте
Процедура НастройкаЗагрузкиПриИзменении(Элемент)
	// Вставить содержимое обработчика.   
	
	Если ЗначениеЗаполнено(НастройкаЗагрузки) тогда
		ЗагрузитьНастройкиВТаблицу(НастройкаЗагрузки,"ТаблицаРеквизитов");
		СоздатьКолонкиТаблицыДанных();
			КонецЕсли;	
		
КонецПроцедуры   

&НаСервере
Процедура ЗагрузитьНастройкиВТаблицу(НастройкаЗагрузки,ТаблицаРеквизитов) 
	ПерваяСтрока = НастройкаЗагрузки.ПерваяСтрока;

	ДанныеХранилища = НастройкаЗагрузки.НастройкаЗагрузки.Получить();
	Если ДанныеХранилища<>Неопределено тогда
		  ЗначениеВРеквизитФормы(ДанныеХранилища,ТаблицаРеквизитов); 
		  ТЗРеквизиты = РеквизитФормыВЗначение(ТаблицаРеквизитов);
		  Для Каждого Ст из ТЗРеквизиты цикл
		      Ст.ОписаниеТипов =Новый ОписаниеТипов(Ст.Тип);
		  КонецЦикла;
		   ЗначениеВРеквизитФормы(ТЗРеквизиты,ТаблицаРеквизитов); 
	КонецЕсли;	
КонецПроцедуры	

&НаСервере
Процедура СоздатьТаблицуЗначенийАдреса(ИмяРеквизита)
	МассивДобавляемыхРеквизитов = Новый Массив; 
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ТаблицаАдреса_"+ИмяРеквизита, Новый ОписаниеТипов("ТаблицаЗначений"))); 
	РеквизитыТаблицы = ЭтаФорма.ПолучитьРеквизиты("Адреса");
	Для Каждого Колонка Из РеквизитыТаблицы Цикл
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения,"ТаблицаАдреса_"+ИмяРеквизита ,Колонка.Имя));
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);

КонецПроцедуры	

&НаСервере
Процедура СоздатьСтраницуСАдресом(ИмяРеквизита)
	Страница = Элементы.Добавить("ГруппаСтраница_" + ИмяРеквизита,Тип("ГруппаФормы"), Элементы.ГруппаАдреса);
    Страница.Вид = ВидГруппыФормы.Страница;
    Страница.Заголовок = "Адрес "+ИмяРеквизита;	      
	
	 ТаблицаПолейВыбора = Элементы.Добавить("ТаблицаАдреса_"+ИмяРеквизита, Тип("ТаблицаФормы"),Страница);
    ТаблицаПолейВыбора.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита;
    ТаблицаПолейВыбора.Отображение = ОтображениеТаблицы.Список;
    ТаблицаПолейВыбора.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Авто; // Отключение командной панели  
    
	
	НоваяКоманда = Команды.Добавить("КомандаНормализоватьАдрес"+ИмяРеквизита);
	НоваяКоманда.Действие = "НормализоватьАдрес";
	НоваяКоманда.Заголовок = "Нормализовать";  
	НоваяКоманда.ИспользуемаяТаблица=ТаблицаПолейВыбора; 
	
	Кнопка		= ЭтаФорма.Элементы.Добавить("ВыполнитьМоюКоманду"+ИмяРеквизита, Тип("КнопкаФормы"),ТаблицаПолейВыбора.КоманднаяПанель);
	Кнопка.Заголовок	= "Нормализовать адреса";
	Кнопка.ИмяКоманды	= "КомандаНормализоватьАдрес"+ИмяРеквизита;    
    
   	НоваяКоманда = Команды.Добавить("КомандаПоказатьОшибки"+ИмяРеквизита);
	НоваяКоманда.Действие = "ПоказатьОшибкиАдрес";
	НоваяКоманда.Заголовок = "Показать ошибки";  
	НоваяКоманда.ИспользуемаяТаблица=ТаблицаПолейВыбора; 
	
	Кнопка		= ЭтаФорма.Элементы.Добавить("КомандаПоказатьОшибки"+ИмяРеквизита, Тип("КнопкаФормы"),ТаблицаПолейВыбора.КоманднаяПанель);
	Кнопка.Заголовок	= "Показать ошибки";
	Кнопка.ИмяКоманды	= "КомандаПоказатьОшибки"+ИмяРеквизита;   
	
	
	
	НоваяКоманда = Команды.Добавить("КомандаРучнаяПоверкаАдрес"+ИмяРеквизита);
	НоваяКоманда.Действие = "ПодтвердитьАдрес";
	НоваяКоманда.Заголовок = "Подтвердить адрес";  
	НоваяКоманда.ИспользуемаяТаблица=ТаблицаПолейВыбора; 
	НоваяКоманда.ИспользованиеТекущейСтроки=ИспользованиеТекущейСтроки.Использует;
	
	Кнопка		= ЭтаФорма.Элементы.Добавить("ПроверитьСтроку"+ИмяРеквизита, Тип("КнопкаФормы"),ТаблицаПолейВыбора.КоманднаяПанель);
	Кнопка.Заголовок	= "Подтвердить адрес";
	Кнопка.ИмяКоманды	= "КомандаРучнаяПоверкаАдрес"+ИмяРеквизита;   
//	ИспользуемаяТаблица
	//
	//1 
			  НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_АдресКорректен", Тип("ПолеФормы"), ТаблицаПолейВыбора);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".АдресКорректен";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеКартинки;  
		  НоваяКолонка.КартинкаЗначений =БиблиотекаКартинок.ДолжникНайден;   
		  НоваяКолонка.ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Нет; 
		  
		  НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_РучнаяПроверка", Тип("ПолеФормы"), ТаблицаПолейВыбора);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".РучнаяПроверка";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеКартинки;  
		  НоваяКолонка.КартинкаЗначений =БиблиотекаКартинок.Предупреждение;   
		  НоваяКолонка.ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Нет;

 
		  Группа = Элементы.Добавить(ИмяРеквизита+"_Группа1",Тип("ГруппаФормы"),ТаблицаПолейВыбора);
		  Группа.Вид = ВидГруппыФормы.ГруппаКолонок;
		  НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_НеобработанныйАдресПолучателя", Тип("ПолеФормы"), Группа);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".НеобработанныйАдресПолучателя";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;  
		  
		    НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_АдресПочта", Тип("ПолеФормы"), Группа);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".АдресПочта";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;   
		  

		  
		  НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_АдресФИАС", Тип("ПолеФормы"), Группа);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".АдресФИАС";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;  
		  НоваяКолонка.КнопкаВыбора=Истина;
		  НоваяКолонка.УстановитьДействие("НачалоВыбора","АдресНачалоВыбораАдреса");	 
		  НоваяКолонка.УстановитьДействие("ОбработкаВыбора","АдресОбработкаВыбора");
		  //2
		  		Группа = Элементы.Добавить(ИмяРеквизита+"_Группа2",Тип("ГруппаФормы"),ТаблицаПолейВыбора);
		 Группа.Вид = ВидГруппыФормы.ГруппаКолонок;
		  НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_СтатусВалидации", Тип("ПолеФормы"), Группа);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".СтатусВалидации";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;  
		  
		    НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_КачествоРаспознавания", Тип("ПолеФормы"), Группа);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".КачествоРаспознавания";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе; 
		  
		  НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_ОписаниеОшибки", Тип("ПолеФормы"), Группа);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".ОписаниеОшибки";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе; 

		  
		  	  НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_Значение", Тип("ПолеФормы"), ТаблицаПолейВыбора);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".Значение";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;  

		  
		  		  //3
		  		Группа = Элементы.Добавить(ИмяРеквизита+"_Группа3",Тип("ГруппаФормы"),ТаблицаПолейВыбора);
		 Группа.Вид = ВидГруппыФормы.ГруппаКолонок;
		  НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_ПочтовыйИндекс", Тип("ПолеФормы"), Группа);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".ПочтовыйИндекс";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;  
		  
		    НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_ИндексФИАС", Тип("ПолеФормы"), Группа);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".ИндексФИАС";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;   
		  
         	      //4
		Группа = Элементы.Добавить(ИмяРеквизита+"_Группа4",Тип("ГруппаФормы"),ТаблицаПолейВыбора);
		 Группа.Вид = ВидГруппыФормы.ГруппаКолонок;
		  НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_ОбластьРегион", Тип("ПолеФормы"), Группа);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".ОбластьРегион";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;  
		  
		    НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_region_guid", Тип("ПолеФормы"), Группа);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".region_guid";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;   
		  
		  НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_ОбластьРегионФИАС", Тип("ПолеФормы"), Группа);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".ОбластьРегионФИАС";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;  

		           	      //5
		Группа = Элементы.Добавить(ИмяРеквизита+"_Группа5",Тип("ГруппаФормы"),ТаблицаПолейВыбора);
		 Группа.Вид = ВидГруппыФормы.ГруппаКолонок;
		  НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_НаселенныйПункт", Тип("ПолеФормы"), Группа);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".НаселенныйПункт";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;  
		  
		    НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_place_guid", Тип("ПолеФормы"), Группа);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".place_guid";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;   
		  
		  НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_НаселенныйПунктФИАС", Тип("ПолеФормы"), Группа);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".НаселенныйПунктФИАС";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;  

		  		           	      //6
		Группа = Элементы.Добавить(ИмяРеквизита+"_Группа6",Тип("ГруппаФормы"),ТаблицаПолейВыбора);
		 Группа.Вид = ВидГруппыФормы.ГруппаКолонок;
		  НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_Улица", Тип("ПолеФормы"), Группа);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".Улица";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;  
		  
		    НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_street_guid", Тип("ПолеФормы"), Группа);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".street_guid";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;   
		  
		  НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_УлицаФИАС", Тип("ПолеФормы"), Группа);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".УлицаФИАС";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;  
		  
		  		  		           	      //7
		Группа = Элементы.Добавить(ИмяРеквизита+"_Группа7",Тип("ГруппаФормы"),ТаблицаПолейВыбора);
		 Группа.Вид = ВидГруппыФормы.ГруппаКолонок;
		  НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_НомерЗдания", Тип("ПолеФормы"), Группа);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".НомерЗдания";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;  
		  
		    НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_House_id", Тип("ПолеФормы"), Группа);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".House_id";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;   
		  
		  НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_НомерЗданияФИАС", Тип("ПолеФормы"), Группа);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".НомерЗданияФИАС";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;  

		  
		  //Микрорайон   
		  		Группа = Элементы.Добавить(ИмяРеквизита+"_Группа8",Тип("ГруппаФормы"),ТаблицаПолейВыбора);
		 Группа.Вид = ВидГруппыФормы.ГруппаКолонок;
		  НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_Микрорайон", Тип("ПолеФормы"), Группа);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".Микрорайон";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;  
		  
		  НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_territory_Id", Тип("ПолеФормы"), Группа);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".territory_Id";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;   
		  
		  НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_МикрорайонФИАС", Тип("ПолеФормы"), Группа);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".МикрорайонФИАС";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;  

		  
		  
		 		  //Район   
		  		Группа = Элементы.Добавить(ИмяРеквизита+"_Группа9",Тип("ГруппаФормы"),ТаблицаПолейВыбора);
		 Группа.Вид = ВидГруппыФормы.ГруппаКолонок;
		  НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_Район", Тип("ПолеФормы"), Группа);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".Район";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;  
		  
		  НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_district_Id", Тип("ПолеФормы"), Группа);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".district_Id";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;   
		  
		  НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_РайонФИАС", Тип("ПолеФормы"), Группа);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".РайонФИАС";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;  

		  
 
		  
		  
		  //Колонки



		  		  		  НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_Строение", Тип("ПолеФормы"), ТаблицаПолейВыбора);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".Строение";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;  
		  
		  		  		  		  НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_Корпус", Тип("ПолеФормы"), ТаблицаПолейВыбора);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".Корпус";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;  

		  		  		  		  НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_НомерАЯ", Тип("ПолеФормы"), ТаблицаПолейВыбора);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".НомерАЯ";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;     
		  
		  		  		  		  		  НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_НазваниеГостиницы", Тип("ПолеФормы"), ТаблицаПолейВыбора);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".НазваниеГостиницы";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе; 
		  
		  		  		  		  		  НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_НомерПомещения", Тип("ПолеФормы"), ТаблицаПолейВыбора);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".НомерПомещения";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе; 
		  
		  		  		  		  		  		  НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_Дробь", Тип("ПолеФормы"), ТаблицаПолейВыбора);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".Дробь";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе; 


		  		  		  		  		  		  НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_address_guid", Тип("ПолеФормы"), ТаблицаПолейВыбора);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".address_guid";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;  
		  
          		  		  		  		  		  		  НоваяКолонка = Элементы.Добавить(ИмяРеквизита+"_id", Тип("ПолеФормы"), ТаблицаПолейВыбора);
		  НоваяКолонка.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+".id";  
		  НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		  НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе; 


	//РеквизитыТаблицы = ЭтаФорма.ПолучитьРеквизиты("ТаблицаАдреса_"+ИмяРеквизита);
	//Для Каждого Колонка Из РеквизитыТаблицы Цикл

	//    НовыйЭлемент = Элементы.Добавить(ИмяРеквизита+"_"+Колонка.Имя, Тип("ПолеФормы"), ТаблицаПолейВыбора);
	//    НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	//    НовыйЭлемент.ПутьКДанным = "ТаблицаАдреса_"+ИмяРеквизита+"." + Колонка.Имя;
	//    НовыйЭлемент.Ширина = 10;

	//КонецЦикла;

КонецПроцедуры	

&НаСервере
  Процедура СоздатьКолонкиТаблицыДанных()   
	 УдалитьКолонкиТаблицыЗначений("ТаблицаДанных"); 
	  ТЗРеквизиты =РеквизитФормыВЗначение("ТаблицаРеквизитов");
	 ТЗДанные = РеквизитФормыВЗначение("ТаблицаДанных");
	 
	 МассивДобавляемыхРеквизитов = Новый Массив;        
	 ОписаниеСоставногоТипа = Новый ОписаниеТипов("Булево");
	 МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Пометка",ОписаниеСоставногоТипа,"ТаблицаДанных" ,"Пометка"));
	 ОписаниеСоставногоТипа = Новый ОписаниеТипов("Булево");
	 МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЕстьОшибки",ОписаниеСоставногоТипа,"ТаблицаДанных" ,"ЕстьОшибки"));
	 ОписаниеСоставногоТипа = Новый ОписаниеТипов("Булево");
	 МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ДолжникНайден",ОписаниеСоставногоТипа,"ТаблицаДанных" ,"ДолжникНайден"));

	 
	 Для Каждого Ст из ТЗРеквизиты цикл                 
		 Если Ст.НомерКолонки<>0 тогда 
			 ОписаниеСоставногоТипа = Новый ОписаниеТипов("Строка");
			 МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Ст.Реквизит+"_Загрузка",ОписаниеСоставногоТипа,"ТаблицаДанных" ,Ст.НаименованиеРеквизита+" Загрузка")); 	
		 КонецЕсли; 
		 СписокТипов = Новый Массив;
		 СписокТипов.Добавить(Ст.тип);
		 ОписаниеСоставногоТипа = Новый ОписаниеТипов(СписокТипов);
		 МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Ст.Реквизит,  Новый ОписаниеТипов(Ст.тип),"ТаблицаДанных" ,Ст.НаименованиеРеквизита)); 	
		 Если Ст.Вид="Адрес" тогда 
			 ОписаниеСоставногоТипа = Новый ОписаниеТипов("Строка");
			 МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Ст.Реквизит+"_Ошибка",ОписаниеСоставногоТипа,"ТаблицаДанных" ,Ст.НаименованиеРеквизита+" Ошибка"));  
			 ОписаниеСоставногоТипа = Новый ОписаниеТипов("Строка");
			 МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Ст.Реквизит+"_Значение",ОписаниеСоставногоТипа,"ТаблицаДанных" ,Ст.НаименованиеРеквизита+" Значение")); 
			 СоздатьТаблицуЗначенийАдреса(Ст.Реквизит);
		 КонецЕсли; 
		 
		 
	 КонецЦикла;  
	 ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	 
	 		 НоваяКолонка = Элементы.Добавить("Пометка", Тип("ПолеФормы"), Элементы.ТаблицаДанных);
			 НоваяКолонка.ПутьКДанным = "ТаблицаДанных.Пометка";  
			 НоваяКолонка.Вид = ВидПоляФормы.ПолеФлажка; 
			 НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.Непосредственно; 
			// НоваяКолонка.ДанныеФлажка="ТаблицаДанных.Пометка";
			 СписокПолей.Добавить(НоваяКолонка.Имя);

			 Для Каждого Ст из ТЗРеквизиты цикл   
				 Если Ст.НомерКолонки<>0 тогда     
					 
					 Группа = Элементы.Добавить(Ст.Реквизит+"Группа",Тип("ГруппаФормы"),Элементы.ТаблицаДанных);
					 Группа.Вид = ВидГруппыФормы.ГруппаКолонок;
					 СписокПолей.Добавить(Группа.Имя);

					 
					 НоваяКолонка = Элементы.Добавить(Ст.Реквизит+"_Загрузка", Тип("ПолеФормы"), Элементы[Ст.Реквизит+"Группа"]);
					 НоваяКолонка.ПутьКДанным = "ТаблицаДанных."+Ст.Реквизит+"_Загрузка";  
					 НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
					 НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;  
					 СписокПолей.Добавить(НоваяКолонка.Имя);
					 
					 НоваяКолонка = Элементы.Добавить(Ст.Реквизит, Тип("ПолеФормы"),  Элементы[Ст.Реквизит+"Группа"]);
					 НоваяКолонка.ПутьКДанным = "ТаблицаДанных."+Ст.Реквизит;  
					 НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
					 НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
					 Если Ст.Вид="Адрес" тогда
					 НоваяКолонка.КнопкаВыбора=Истина;
	 				 НоваяКолонка.УстановитьДействие("НачалоВыбора","АдресНачалоВыбора");	 
					 НоваяКолонка.УстановитьДействие("ОбработкаВыбора","АдресОбработкаВыбора");	
					 //Добавить страницу с адресами и ТЗ  
					 СоздатьСтраницуСАдресом(Ст.Реквизит);
					 //===========
					 КонецЕсли;	 
					 Тип=Ст.ОписаниеТипов.Типы()[0]; 
					 Если Тип=ТипЗнч(ТекущаяДата()) тогда
						 НоваяКолонка.Формат ="ДФ=dd.MM.yyyy";
					 КонецЕсли;	
					 СписокПолей.Добавить(НоваяКолонка.Имя);
					 
					 
				 иначе 
					 Если Ст.Реквизит="Ссылка" тогда  
							 Группа = Элементы.Добавить(Ст.Реквизит+"Группа",Тип("ГруппаФормы"),Элементы.ТаблицаДанных);
							 Группа.Вид = ВидГруппыФормы.ГруппаКолонок;
							 Группа.Группировка = ГруппировкаКолонок.ВЯчейке;
							 СписокПолей.Добавить(Группа.Имя); 
							 
					 НоваяКолонка = Элементы.Добавить("ДолжникНайден", Тип("ПолеФормы"), Элементы[Ст.Реквизит+"Группа"]);
					 НоваяКолонка.ПутьКДанным = "ТаблицаДанных.ДолжникНайден";  
					 НоваяКолонка.Вид = ВидПоляФормы.ПолеКартинки;  
					 НоваяКолонка.КартинкаЗначений =БиблиотекаКартинок.ДолжникНайден;
					 
		 
					 НоваяКолонка = Элементы.Добавить(Ст.Реквизит, Тип("ПолеФормы"), Элементы[Ст.Реквизит+"Группа"]);
					 НоваяКолонка.ПутьКДанным = "ТаблицаДанных."+Ст.Реквизит;  
					 НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
					 НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;

					 иначе
						 
					 НоваяКолонка = Элементы.Добавить(Ст.Реквизит, Тип("ПолеФормы"), Элементы.ТаблицаДанных);
					 НоваяКолонка.ПутьКДанным = "ТаблицаДанных."+Ст.Реквизит;  
					 НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
					 НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
					 Тип=Ст.ОписаниеТипов.Типы()[0]; 
					 Если Тип=ТипЗнч(ТекущаяДата()) тогда
						 НоваяКолонка.Формат ="ДФ=dd.MM.yyyy";
					 КонецЕсли;	
					 СписокПолей.Добавить(НоваяКолонка.Имя);
					 КонецЕсли;
				 КонецЕсли;
			 КонецЦикла;  
			 

 
		 КонецПроцедуры  
		 
		 
		 
&НаКлиенте
Процедура АдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка =Ложь;
	 // Вставить содержимое обработчика.  
	ПараметрыОткрытия=Новый Структура;
	ПараметрыОткрытия.Вставить("ОткрытаПоСценарию","");                                                            
	ПараметрыОткрытия.Вставить("Представление",Элемент.ТекстРедактирования); 
	ДопПараметры=Новый Структура; 
    Если Элемент.ТекстРедактирования<>"" тогда
	    Результат = ПолучитьЗН(Элемент.ТекстРедактирования); 	 
		ПараметрыОткрытия.Вставить("Значение",Результат);
	КонецЕсли;	
	
	              //Элементы.ТаблицаДанных.ТекущиеДанные
	ДопПараметры.Вставить("СтрокаДанных",Элементы.ТаблицаДанных.ТекущиеДанные);
	ДопПараметры.Вставить("ИмяПоля",Элемент.Имя);

	Оповещение= НОвый ОписаниеОповещения("ОбработатьВыборАдреса",ЭтотОбъект,ДопПараметры); 
	
    ОткрытьФорму("Обработка.РасширенныйВводКонтактнойИнформации.Форма.ВводАдреса",ПараметрыОткрытия,Элемент,,,,Оповещение);

КонецПроцедуры  

&НаКлиенте
Процедура АдресНачалоВыбораАдреса(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка =Ложь;      
	
    ТаблицаАдреса= ЭтотОбъект["ТаблицаАдреса_"+ПолучитьИмяПоляПоИмениПоля(Элемент.Родитель.Имя)]; 
	ТекСтрока=Элементы["ТаблицаАдреса_"+ПолучитьИмяПоляПоИмениПоля(Элемент.Родитель.Имя)].ТекущиеДанные;
	 // Вставить содержимое обработчика.  
	ПараметрыОткрытия=Новый Структура;
	ПараметрыОткрытия.Вставить("ОткрытаПоСценарию","");                                                            
	ПараметрыОткрытия.Вставить("Представление",ТекСтрока.АдресФИАС); 
	ДопПараметры=Новый Структура; 
	 
		ПараметрыОткрытия.Вставить("Значение",ТекСтрока.Значение);

	ДопПараметры.Вставить("СтрокаДанных",ТекСтрока);
	ДопПараметры.Вставить("ИмяПоля",Элемент.Имя);

	Оповещение= НОвый ОписаниеОповещения("ОбработатьВыборАдреса2",ЭтотОбъект,ДопПараметры); 
	
    ОткрытьФорму("Обработка.РасширенныйВводКонтактнойИнформации.Форма.ВводАдреса",ПараметрыОткрытия,Элемент,,,,Оповещение);

КонецПроцедуры   

//ПО ВЫБОРУ АДРЕСА
 &НаКлиенте
 Процедура ОбработатьВыборАдреса2(Результат,ДопПарметры) Экспорт  
	 Если Результат<>Неопределено тогда    
		 ДопПарметры.СтрокаДанных.Значение = Результат.Значение; 
		 ДопПарметры.СтрокаДанных.АдресФИАС = Результат.Представление;
		 Результат=ЗаполнитьСтрокуАдресаИзЗначенияФИАС(Результат.Значение);
		 Если Результат.addressType="Административно-территориальный" тогда
			 СоответствиеПолей = ВернутьСоответсвиеПолейПочтаФИАС();
			 Для Каждого Элемент из СоответствиеПолей цикл
				 Если ТипЗнч(Результат[Элемент.Значение])=Тип("Массив") тогда//КОМНАТЫ СТРОЕНИЯ КОРПУСА
					 если Результат[Элемент.Значение].Количество()>0 тогда
						 Если Элемент.Значение="apartments" тогда
							 ДопПарметры.СтрокаДанных[Элемент.Ключ]=Результат[Элемент.Значение][0].number;		
						 КонецЕсли;	
						 Если Элемент.Значение="buildings" тогда
							 Для Каждого ЭлементКорпуса из  Результат[Элемент.Значение] цикл
								 Если ЭлементКорпуса.type =  "Корпус" тогда
									 ДопПарметры.СтрокаДанных["Корпус"]=ЭлементКорпуса.number;	
								 КонецЕсли;
								 Если ЭлементКорпуса.type =  "Строение" тогда
									 ДопПарметры.СтрокаДанных["Строение"]=ЭлементКорпуса.number;	
								 КонецЕсли;
							 КонецЦикла;	
						 КонецЕсли;
					 КонецЕсли;	
				 иначе	
					 ДопПарметры.СтрокаДанных[Элемент.Ключ]=Результат[Элемент.Значение];	
				 КонецЕсли
			 КонецЦикла;	
			 ПоляЗаполнения ="region_guid,street_guid,place_guid,district_Id,territory_Id";
			 МассивПолей=СтрРазделить(ПоляЗаполнения,",");
			 СоответствиеПолей	= ВернутьСоответсвиеGUID_ФИАС();
			 
			 Для Каждого Поле из МассивПолей цикл
				 СтрокаОбъектАдреса = ПолучитьОбъектПОИдентификатору(ДопПарметры.СтрокаДанных[Поле]);
				 ДопПарметры.СтрокаДанных[СоответствиеПолей.Получить(Поле)]=СтрокаОбъектАдреса;				
			 КонецЦикла;	                
			 
			 Если ПроверитьЗначениеАдресаПоФИАС( ДопПарметры.СтрокаДанных.Значение)  тогда
				 ДопПарметры.СтрокаДанных.АдресКорректен=Истина;	
				 ДопПарметры.СтрокаДанных.ОписаниеОшибки="";                
				 				 
                  ИмяРеквизита = ПолучитьИмяПоляПоИмениТаблицы(ДопПарметры.ИмяТаблицы);  
				 СтрокаДанных = ТаблицаДанных.НайтиПоИдентификатору(ДопПарметры.СтрокаДанных.ID);   
				 Если СтрокаДанных<>Неопределено тогда 
					 СтрокаДанных[ИмяРеквизита]=ДопПарметры.СтрокаДанных.АдресФИАС;
					 СтрокаДанных[ИмяРеквизита+"_Значение"]=ДопПарметры.СтрокаДанных.Значение;
				 КонецЕсли;  
				 
			 иначе
				 ДопПарметры.СтрокаДанных.АдресКорректен=Ложь;
				  ДопПарметры.СтрокаДанных.ОписаниеОшибки="Ошибка проверки адреса ФИАС";

			 КонецЕсли; 
	 
		 КонецЕсли; 
		 
	 КонецЕсли;
 КонецПроцедуры
 
 &НаСервере
 Функция ПроверитьЗначениеАдресаПоФИАС(ЗначениеАдресаJSON)
	  Результат = УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(ЗначениеАдресаJSON, Перечисления.ТипыКонтактнойИнформации.Адрес);
	  ВидКИ = УправлениеКонтактнойИнформациейСлужебный.СтруктураВидаКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.РегистрацииАдресДолжника);
	  РезультатПроверки = Обработки.РасширенныйВводКонтактнойИнформации.ОшибкиЗаполненияАдресаXDTO(Результат, ВидКИ);
      Если РезультатПроверки.Количество()=0 тогда 
	      Возврат Истина; 
	  КонецЕсли;	

	  Возврат Ложь;


	КонецФункции 

&НаСервере
 Функция ВернутьСоответсвиеGUID_ФИАС()
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("region_guid","ОбластьРегионФИАС");
	СоответствиеПолей.Вставить("street_guid","УлицаФИАС");
	СоответствиеПолей.Вставить("place_guid","НаселенныйПунктФИАС");
    СоответствиеПолей.Вставить("district_Id","РайонФИАС");
	СоответствиеПолей.Вставить("territory_Id","МикрорайонФИАС");
	Возврат СоответствиеПолей;
КонецФункции

&НаСервере
Функция ВернутьСоответсвиеПолейПочтаФИАС()
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("region_guid","areaId");
	СоответствиеПолей.Вставить("street_guid","streetId");
	СоответствиеПолей.Вставить("place_guid","cityId");
	СоответствиеПолей.Вставить("house_id","houseId");
	СоответствиеПолей.Вставить("district_Id","districtId");
	СоответствиеПолей.Вставить("НомерЗданияФИАС","houseNumber");
	СоответствиеПолей.Вставить("territory_Id","territoryId");
	СоответствиеПолей.Вставить("НомерПомещения","apartments");
	СоответствиеПолей.Вставить("Корпус","buildings");   
	СоответствиеПолей.Вставить("ИндексФИАС","ZIPcode");

	Возврат СоответствиеПолей;
КонецФункции	
 
 &НаСервере
 Функция ЗаполнитьСтрокуАдресаИзЗначенияФИАС(ЗначениаАдресаJSON)
	ЗначениаАдресаJSON= УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(ЗначениаАдресаJSON, Перечисления.ТипыКонтактнойИнформации.Адрес); 
	Возврат ЗначениаАдресаJSON;	
КонецФункции	 

&НаСервере
  Функция ПолучитьИмяПоляПоИмениПоля(ИмяПоля)   
	// ТаблицаАдреса_Представление 
	Вхождение = СтрНайти(ИмяПоля,"_",НаправлениеПоиска.СНачала); 
	Возврат Сред(ИмяПоля,0,Вхождение-1);
КонецФункции 


	&НаКлиенте
	Процедура АдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		СтандартнаяОбработка=Ложь;
		//Элемент.ТекстРедактирования=ВыбранноеЗначение.Представление; 
		//ЗначениеАдреса =ВыбранноеЗначение.Значение; 
	КонецПроцедуры


&НаСервере
Функция ПолучитьЗН(АдресСтрока)
 Результат = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияПоПредставлению(АдресСтрока, Перечисления.ТипыКонтактнойИнформации.Адрес);	
Возврат УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(Результат);
КонецФункции	


 &НаКлиенте
 Процедура ОбработатьВыборАдреса(Результат,ДопПарметры) Экспорт  
	 Если Результат<>Неопределено тогда 
		 ДопПарметры.СтрокаДанных[ДопПарметры.ИмяПоля+"_Значение"]=Результат.Значение;
		 ДопПарметры.СтрокаДанных[ДопПарметры.ИмяПоля]=Результат.Представление;
	КонецЕсли;
	
 КонецПроцедуры	   


 &НаСервере
 Процедура УдалитьКолонкиТаблицыЗначений(ТаблицаЗначений)
	    МассивУдаляемыхРеквизитов = Новый Массив;
        РеквизитыТЗ = ПолучитьРеквизиты(ТаблицаЗначений);
        
       Для Каждого Реквизит Из РеквизитыТЗ Цикл
 
            МассивУдаляемыхРеквизитов.Добавить(ТаблицаЗначений+"."+Реквизит.Имя);
       КонецЦикла;
      ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);  

	  Для Каждого Поле из СписокПолей цикл  
		  НАшлиПоле=Элементы.Найти(Поле);  
		  Если НАшлиПоле<>Неопределено тогда
		Элементы.Удалить(НАшлиПоле);	                
		КонецЕсли;
	 Конеццикла; 
     СписокПолей.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	Режим = РежимДиалогаВыбораФайла.Открытие; 
    ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим); 
    ДиалогОткрытияФайла.ПолноеИмяФайла = ""; 
    Фильтр = "Таблица(*.xlsx)|*.xlsx"; 
    ДиалогОткрытияФайла.Фильтр                = Фильтр; 
    ДиалогОткрытияФайла.МножественныйВыбор    = Ложь; 
    ДиалогОткрытияФайла.Заголовок            = "Выберите файл Эксель"; 
    
    Если ДиалогОткрытияФайла.Выбрать() Тогда 
        ПутьКФайлу = ДиалогОткрытияФайла.ПолноеИмяФайла;
    Иначе
        Возврат;
	КонецЕсли;
	
    Попытка
        ex = Новый COMОбъект("Excel.Application");
        ex.WorkBooks.Open(ПутьКФайлу);
    Исключение
        Сообщить("Не установлено приложение MS Excel!");
        Возврат;
	КонецПопытки;
	
	
	  RCount = ex.ActiveSheet.UsedRange.Rows.Count();
	  Для j = ПерваяСтрока по RCount цикл 
		НоваяСтрока=  ПолучитьСт();
		Для Каждого Реквизит из ТаблицаРеквизитов цикл
			
			Если (Реквизит.НомерКолонки)<>0 тогда
			НоваяСтрока[Реквизит.Реквизит+"_Загрузка"]= СокрЛП(ex.ActiveSheet.Cells(j,Реквизит.НомерКолонки).Value);	
			КонецЕсли;	
		КонецЦикла;	
		ПередатьСтрокуВДЗ(НоваяСтрока);
	КонецЦикла;

	ex.workbooks.Close();
	ex.quit();

    ЗаполнитьНеобработанныеАдреса();
КонецПроцедуры 

&НаСервере
Функция ЗаполнитьНеобработанныеАдреса()
	Для Каждого Реквизит из ТаблицаРеквизитов цикл
		Если Реквизит.Вид="Адрес" тогда
			Для Каждого СтрокаДанных из ТаблицаДанных цикл
				Если  СтрокаДанных[Реквизит.Реквизит+"_Загрузка"]<>"" тогда
					НоваяСтрокаАдрес = ЭтотОбъект["ТаблицаАдреса_"+Реквизит.Реквизит].Добавить();	
					НоваяСтрокаАдрес.НеобработанныйАдресПолучателя=СтрокаДанных[Реквизит.Реквизит+"_Загрузка"];
					НоваяСтрокаАдрес.ID=СтрокаДанных.ПолучитьИдентификатор();
				КонецЕсли;	

			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;	
	
КонецФункции	

&НаСервере
Функция СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыЗначений) Экспорт
	
	Структура = Новый Структура;
	Для каждого Колонка Из СтрокаТаблицыЗначений.Владелец().Колонки Цикл
		Структура.Вставить(Колонка.Имя, СтрокаТаблицыЗначений[Колонка.Имя]);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции 

  
&НаСервере
Функция ПередатьСтрокуВДЗ(НоваяСтрока)
ДЗ=РеквизитФормыВЗначение("ТаблицаДанных"); 
НовСТ =Дз.Добавить();
ЗаполнитьЗначенияСвойств(НовСт,НоваяСтрока);
НовСТ.Пометка=Истина;

  ЗначениеВРеквизитФормы(ДЗ, "ТаблицаДанных");
//Возврат СтрокаТаблицыЗначенийВСтруктуру(Дз.Строки.Добавить());
КонецФункции	



&НаСервере
Функция ПолучитьСт()
ДЗ=РеквизитФормыВЗначение("ТаблицаДанных");
Возврат СтрокаТаблицыЗначенийВСтруктуру(Дз.Добавить()); 
КонецФункции	


&НаСервере
Процедура АнализСтрокиДанных2(СтрокаДанных)
	Для Каждого Реквизит из ТаблицаРеквизитов цикл    
		Тип=Реквизит.ОписаниеТипов.Типы()[0];
		Если Тип=ТипЗнч("Строка") тогда 
			Если Реквизит.РежимЗагрузки  = "Искать" тогда  
				Если Реквизит.НомерКолонки<>0 тогда
					Если  Реквизит.Вид<>"Адрес" тогда
					СтрокаДанных[Реквизит.Реквизит]=ВернутьЗначениеСтроки(СтрокаДанных[Реквизит.Реквизит+"_Загрузка"]);
					КонецЕсли;
					Если  ЗначениеЗаполнено(Реквизит.ОбработкаПриведения) тогда
						ТекущаяСтрока=СтрокаДанных;
						ТекущийРеквизитЗагрузка=Реквизит.Реквизит+"_Загрузка";
						ТекущийРеквизит=Реквизит.Реквизит;
						Выполнить(Реквизит.ОбработкаПриведения.КодОбработки);
					КонеЦЕсли;						
				КонеЦЕсли; 
			КонецЕсли;	
		КонецЕсли;		
		//--Строка
		Если Тип=ТипЗнч(ТекущаяДата()) тогда 
			
			Если Реквизит.РежимЗагрузки  = "Искать" тогда 
				Если Реквизит.НомерКолонки<>0 тогда
					СтрокаДанных[Реквизит.Реквизит]=ВернутьЗначениеДаты(СтрокаДанных[Реквизит.Реквизит+"_Загрузка"]); 
				КонецЕсли;
			КонеЦЕсли;
			
		КонецЕсли; 
		Если Тип=ТипЗнч(Число(1)) тогда 
			Если Реквизит.РежимЗагрузки  = "Искать" тогда 
				Если Реквизит.НомерКолонки<>0 тогда
					СтрокаДанных[Реквизит.Реквизит]=ВернутьЗначениеЧисла(СтрокаДанных[Реквизит.Реквизит+"_Загрузка"]); 
				КонецЕсли;
			КонеЦЕсли;
			
		КонецЕсли;		
		ОбъектМетаданных  =Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных<>Неопределено тогда  	
			//Перечисления
			Если Метаданные.Перечисления.Содержит(ОбъектМетаданных) тогда
				
				Если Реквизит.РежимЗагрузки  = "Искать" тогда   
					Если Реквизит.НомерКолонки<>0 тогда
						СтрокаДанных[Реквизит.Реквизит]=ВернутьЗначениеПеречисления(ОбъектМетаданных.Имя,СтрокаДанных[Реквизит.Реквизит+"_Загрузка"]); 
					КонеЦЕсли;
				КонеЦЕсли;  
				Если Реквизит.РежимЗагрузки  = "Устанавливать" тогда  
					СтрокаДанных[Реквизит.Реквизит]=Реквизит.Значение;
				КонеЦЕсли;		
			КонецЕсли;	                             
		КонецЕсли;
		
	КонецЦикла;	
КонецПроцедуры	

&НаСервере
Функция ДобавитьАдресДляАнализа(МасивАдроесов, Идентификатор,АдресСтрока)
	Адр = Новый Соответствие;
		Адр.Вставить("id", Идентификатор);
		Адр.Вставить("original-address",АдресСтрока);
		МасивАдроесов.Добавить(Адр);
      Возврат МасивАдроесов;
  КонецФункции
  
  &НаСервере
  Функция ПочтаРоссииОтправитьЗапрос(массивАдресов)
	  	НачСоответсвие = Новый Соответствие;
	НачСоответсвие.Вставить("index"				,"ПочтовыйИндекс");
	НачСоответсвие.Вставить("area"				,"Район");	
	НачСоответсвие.Вставить("building"			,"Строение");	
	НачСоответсвие.Вставить("corpus"			,"Корпус");	
	НачСоответсвие.Вставить("hotel"				,"НазваниеГостиницы");	
	НачСоответсвие.Вставить("house"				,"НомерЗдания");	
	НачСоответсвие.Вставить("location"			,"Микрорайон");
	НачСоответсвие.Вставить("num-address-type"	,"НомерАЯ");
	НачСоответсвие.Вставить("original-address"	,"НеобработанныйАдресПолучателя");
	НачСоответсвие.Вставить("place"				,"НаселенныйПункт");
	НачСоответсвие.Вставить("region"			,"ОбластьРегион");
	НачСоответсвие.Вставить("room"				,"НомерПомещения");
	НачСоответсвие.Вставить("slash"				,"Дробь");
	НачСоответсвие.Вставить("street"			,"Улица");
	НачСоответсвие.Вставить("street-guid"			,"street_guid");
	НачСоответсвие.Вставить("place-guid"			, "place_guid");
    НачСоответсвие.Вставить("address-guid"			,"address_guid");
    НачСоответсвие.Вставить("region-guid"			,"region_guid");  
    НачСоответсвие.Вставить("validation-code"			,"СтатусВалидации");  
    НачСоответсвие.Вставить("quality-code"			,"КачествоРаспознавания");  
                      
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, массивАдресов);
	СтрJSON = ЗаписьJSON.Закрыть();
	ТокенАвторизации = "ZBDB1KqLcA6Q2N4JFZg9dnQNaet_aHgM";
	КлючАвторизацииПользователя = "bHV6aW4uYWxleGFuZHJAbWFpbC5ydTpRYXoxMjMzMjEj";
	ssl = Новый ЗащищенноеСоединениеOpenSSL(Неопределено,Неопределено);
	Ресурс = "/1.0/clean/address"; 
	
	HTTPСоединение = Новый HTTPСоединение("otpravka-api.pochta.ru",443,,,,,ssl);
	HTTPЗапрос     = Новый HTTPЗапрос(Ресурс);
	HTTPЗапрос.Заголовки.Вставить("Content-type"		,"application/json");
	HTTPЗапрос.Заголовки.Вставить("Accept"				,"application/json;charset=UTF-8");
	HTTPЗапрос.Заголовки.Вставить("Authorization"		,"AccessToken " + ТокенАвторизации);
	HTTPЗапрос.Заголовки.Вставить("X-User-Authorization","Basic " + КлючАвторизацииПользователя);
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрJSON,"CESU-8");	
	
	
	Ответ = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);	
	
	СтрокаОтвета = Ответ.ПолучитьТелоКакСтроку("UTF-8");
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаОтвета);
	Рез = ПрочитатьJSON(ЧтениеJSON, Истина);
	ЧтениеJSON.Закрыть();
    Возврат Рез
КонецФункции 

&НаСервере
Процедура АнализНаСервере()  
	Для Каждого СтрокаДанных Из ТаблицаДанных цикл 
		 АнализСтрокиДанных2(СтрокаДанных);
	 КонецЦикла;	
 КонецПроцедуры 
 
&НаСервере 
  Функция ПопыткаПривестиПочтовыйАдресКФИАС(СтрокаДанных)
	  Результат =УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияПоПредставлению( СтрокаДанных.АдресПочта, Перечисления.ТипыКонтактнойИнформации.Адрес,Истина);	  
	  ВидКИ = УправлениеКонтактнойИнформациейСлужебный.СтруктураВидаКонтактнойИнформации(Справочники.ВидыКонтактнойИнформации.РегистрацииАдресДолжника);
	  РезультатПроверки = Обработки.РасширенныйВводКонтактнойИнформации.ОшибкиЗаполненияАдресаXDTO(Результат, ВидКИ);
	  
	  Если РезультатПроверки.Количество()=0 тогда 
		  СтрокаДанных.Значение=УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(Результат);
		  СтрокаДанных.АдресФИАС = Результат.value;	
		  СтрокаДанных.ИндексФИАС = Результат.ZIPcode;
		  СтрокаДанных.House_id  = Результат.houseId;
		  СтрокаДанных.НомерЗданияФИАС = Результат.houseNumber;			
		  
		  Возврат Истина; 
	  иначеесли (РезультатПроверки.Количество()=1) и  (РезультатПроверки[0].ИмяПоля="Дом") тогда 
		  Если ПростоНетДомаВБазе(СтрокаДанных) тогда 
			 Результат= ДополнимАдресФИАСДаннымиОДоме(Результат,СтрокаДанных);  
			 СтрокаДанных.Значение=УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(Результат);
			 СтрокаДанных.АдресФИАС = Результат.value;	

             Возврат Истина;
		  иначе  
			  СтрокаДанных.Значение=УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(Результат);
			  Возврат Ложь;	
		  КонецЕсли;
	  КонецЕсли;
	  //    Сообщить(РезультатПроверки);
	  Возврат Ложь;

  КонецФункции
 
       
 
  
    &НаСервере
 Функция СформироватьАдресПочты(СтрокаДанных)
	 РеквизитыАдреса="ПочтовыйИндекс,ОбластьРегион,Район,НаселенныйПункт,Микрорайон,Улица,НомерЗдания,Строение,Корпус,НомерПомещения";
	 МассивРеквизитов =СтрРазделить(РеквизитыАдреса,",");
	 ПочтовыйАдрес="";
	 Для Каждого Реквизит из МассивРеквизитов цикл
	  ПочтовыйАдрес = СформироватьАдресИзРеквизитов(ПочтовыйАдрес,СтрокаДанных,Реквизит);
  	КонецЦикла;
     //Сообщить(ПочтовыйАдрес);
 //
    Возврат ПочтовыйАдрес;
КонецФункции
&НаСервере
Функция СформироватьАдресИзРеквизитов(ПочтовыйАдрес,СтрокаДанных,РеквизитАдреса)
	Если ЗначениеЗаполнено(СтрокаДанных[РеквизитАдреса])тогда
		Если ПочтовыйАдрес<>"" тогда
			ПочтовыйАдрес=ПочтовыйАдрес+", ";
		КонецЕсли;
		 ПочтовыйАдрес=ПочтовыйАдрес+ДобавитьТип(РеквизитАдреса)+СтрокаДанных[РеквизитАдреса];
	 КонецЕсли;
	 Возврат ПочтовыйАдрес;
 КонецФункции

&НаСервере
 Функция ДобавитьТип(РеквизитАдреса)
	 Если РеквизитАдреса="НомерЗдания" тогда
		 Возврат "д. ";
	 КонецЕсли;	
	 Если РеквизитАдреса="Строение" тогда
		 Возврат "ст. ";
	 КонецЕсли;	 
	 	 Если РеквизитАдреса="Корпус" тогда
		 Возврат "к. ";
	 КонецЕсли;	
	 	 	 Если РеквизитАдреса="НомерПомещения" тогда
		 Возврат "кв. ";
	 КонецЕсли;	
	 возврат "";
КонецФункции	 

&НаСервере
  Процедура ПроверитьОбработатьРегионНаселенныйПукт(Соотв)
	 Если (Соотв["region_guid"]=Соотв["place_guid"] ) тогда
		//Соотв.place_guid ="";
		Соотв.place="";
	 КонецЕсли; 
 КонецПроцедуры 

&НаСервере
Функция ВернутьЗначениеДаты(СтрокаДата)
	Попытка
	Возврат Дата(СтрокаДата);
исключение  
	Возврат Дата(1,1,1);
	КонецПопытки;
КонецФункции

&НаСервере
Функция ВернутьЗначениеЧисла(СтрокаЧисло)
	Попытка
	Возврат Число(СтрокаЧисло);
исключение  
	Возврат 0;
	КонецПопытки;
КонецФункции	

&НаСервере
Функция ВернутьЗначениеСтроки(СтрокаЗначения)
	Возврат СокрЛП(СтрокаЗначения);
КонецФункции	

&НаСервере
Функция ВернутьЗначениеПеречисления(ВидПеречисления, ЗначениеТекст)

    ЗначениеПеречисления = Неопределено;
	
	Для Каждого ТекЗначение Из Метаданные.Перечисления[ВидПеречисления].ЗначенияПеречисления Цикл
        Если ВРЕГ(ТекЗначение.Имя) = ВРЕГ(ЗначениеТекст) Или ВРЕГ(ТекЗначение.Синоним) = ВРЕГ(ЗначениеТекст) Тогда
            ЗначениеПеречисления = Перечисления[ВидПеречисления][ТекЗначение.Имя];
            Прервать;
        КонецЕсли;
    КонецЦикла;

    Возврат ЗначениеПеречисления;

КонецФункции

&НаКлиенте
Процедура Анализ(Команда)
	АнализНаСервере();  
	ПоискСправочников(); 
	ПроверкаОшибок(Ложь);
КонецПроцедуры    

&НаКлиенте
Процедура ПроверкаОшибок(ВыводитьОшибки)          
	МассивСтрокПроверок=Новый МАссив;
	Для Каждого СтрокаРеквизитов из ТаблицаРеквизитов цикл
		Если ЗначениеЗаполнено(СтрокаРеквизитов.ОбработкаПроверки) тогда
			МассивСтрокПроверок.Добавить(СтрокаРеквизитов);	
		КонецЕсли;	
	КонецЦикла	;           
  
	 Для Каждого СтрокаДанных из ТаблицаДанных цикл
		 ПроверкаОшибокСтроки(СтрокаДанных,МассивСтрокПроверок,ВыводитьОшибки);
	 КонецЦикла;	 
 КонецПроцедуры  
 &НаКлиенте
 Процедура ПроверкаОшибокСтроки(СтрокаДанных,МассивСтрокПроверок,ВыводитьОшибки=Ложь)
	 СтрокаДанных.ЕстьОшибки =ложь;
	 Для Каждого ЭлементПроверки из МассивСтрокПроверок цикл
		 ДанныеПроверки=СтрокаДанных[ЭлементПроверки.Реквизит];
		 ПроверкаПрошла=Истина;
		 ОписаниеОшибки="";
		 //===========================
		 Если ЭлементПроверки.Вид="Адрес" тогда 
			 Если ДанныеПроверки<>"" тогда
				 Если СтрокаДанных[ЭлементПроверки.Реквизит+"_Ошибка"] <>"" тогда
				ПроверкаПрошла=Ложь;
                 ОписаниеОшибки= СтрокаДанных[ЭлементПроверки.Реквизит+"_Ошибка"];
				 КонецЕсли; 
			 КонецЕсли; 
		 КонецЕсли;		 
		 //===========================
		 Выполнить(ПолучитьКодОбработкиНаСервере(ЭлементПроверки.ОбработкаПроверки));
		 Если НЕ ПроверкаПрошла тогда
			 СтрокаДанных.ЕстьОшибки = Истина;
			 СтрокаОшибки=ТаблицаОшибки.Добавить();
			 СтрокаОшибки.Ошибка =СтрокаДанных.Наименование +" :" +ОписаниеОшибки;
			 СтрокаОшибки.Текст = СтрокаДанных.Наименование +" :" +ОписаниеОшибки;
			 СтрокаОшибки.Поле ="ТаблицаДанных[" + ТаблицаДанных.Индекс(СтрокаДанных) + "]."+ЭлементПроверки.Реквизит; 	
			 Если ВыводитьОшибки тогда
				 Сообщение = Новый СообщениеПользователю;
				 ЗаполнитьЗначенияСвойств(Сообщение,СтрокаОшибки);
				 Сообщение.Сообщить();
			 КонецЕсли;	 
		 КонецЕсли;	
	 КонецЦикла;	                 
	 СтрокаДанных.Пометка = Не СтрокаДанных.ЕстьОшибки;
	 Если ЗначениеЗаполнено(СтрокаДанных.Ссылка) тогда
		 СтрокаДанных.Пометка = Истина; 
	 Конецесли; 
 
КонецПроцедуры 
  
//
//Параметры:
// КоллекцияСтрок – ДанныеФормыКоллекцияЭлементовДерева – Коллекция подчиненных строк элемента дерева значений, используемого в управляемых формах.
// ПараметрыОтбора - Структура - Структура с критериями поиска.
//                               Задает условия поиска: ключ структуры определяет имя колонки, по которой будет осуществляться поиск,
//                               а значение структуры - искомое значение.
//                               Структура без полей означает "выбрать все подчиненные строки".
// ВключатьПодчиненные - Булево - Определяет, будет ли производиться поиск также в подчиненных коллекциях (если таковые имеются).
//                                Истина - поиск будет произведен.
//
//Возвращаемое значение:
// Массив(ДанныеФормыЭлементДерева) – Массив из строк дерева значений, соответствующих заданному условию поиска.
//
&НаСервере
Функция ДанныеФормыКоллекцияЭлементовДереваНайтиСтроки(КоллекцияСтрок, ПараметрыОтбора, ВключатьПодчиненные = Ложь) Экспорт
	Результат = Новый Массив;
	Для Каждого СтрокаТекущая Из КоллекцияСтрок Цикл
		СтрокаНайдена = Истина;
		Для Каждого КлючИЗначение Из ПараметрыОтбора Цикл
			Если СтрокаТекущая[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
				СтрокаНайдена = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаНайдена Тогда
			Результат.Добавить(СтрокаТекущая);
		КонецЕсли;
		Если ВключатьПодчиненные Тогда
			ПодчиненныеСтроки = ДанныеФормыКоллекцияЭлементовДереваНайтиСтроки(СтрокаТекущая.ПолучитьЭлементы(), ПараметрыОтбора, ВключатьПодчиненные);
			Для Каждого НайденнаяСтрока Из ПодчиненныеСтроки Цикл
				Результат.Добавить(НайденнаяСтрока);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции
		

&НаСервере
Процедура ПоискСправочников()

 //ТЗРеквизиты=РеквизитФормыВЗначение("ТаблицаРеквизитов");
 //ТЗДанные=РеквизитФормыВЗначение("ТаблицаДанных");
 Для Каждого СтрокаДанных из ТаблицаДанных цикл
		АнализСтрокиДанных(СтрокаДанных); 
		 
 КонецЦикла; 
 //ЗначениеВРеквизитФормы(ТЗДанные, "ТаблицаДанных");

КонецПроцедуры

&НаСервере
Процедура АнализСтрокиДанных(СтрокаДанных,ТипДанных = Неопределено)
	Если Не ЗначениеЗаполнено(ТипДанных) тогда
	   НайтиОбработатьДолжников(СтрокаДанных);
	   НайтиОБработатьДолги(СтрокаДанных);    
   иначеесли ТипДанных="СправочникСсылка.Должники" тогда
	    НайтиОбработатьДолжников(СтрокаДанных);
	иначеесли ТипДанных="СправочникСсылка.Долги" тогда
		  НайтиОБработатьДолги(СтрокаДанных); 
	  КонецЕсли; 
   КонецПроцедуры	
   
   &НаСервере
   Процедура  НайтиОБработатьДолги(СтрокаДанных)
	   ДолгиСписок =НайтиДолги(СтрокаДанных);
	   ОбработатьНайденныеДолги(СтрокаДанных,ДолгиСписок);
   КонецПроцедуры 
  
   &НаСервере
   Процедура ОбработатьНайденныеДолги(СтрокаДанных,ДолгиСписок)
   
	 Если ДолгиСписок.Количество()=1 тогда
		СтрокаДанных.СсылкаДолг= ДолгиСписок[0];	
	КонецЕсли;	

   
   КонецПроцедуры
   
&НаСервере   
   Функция НайтиДолги(СтрокаДанных)
	  ДолгиСписок=НОвый ТаблицаЗначений; 
	  //Если есть должник ищем по нему
	   Если ЗначениеЗаполнено(СтрокаДанных.Ссылка) тогда
   	    ДолгиСписок =НайтиДолгиПоНОмеруДоговораКонтрагентСумма(СтрокаДанных);
	   КонецЕсли;                     
	    //Если Не нашли или это новый ищем долги уже прогруженные выше
	   Если ДолгиСписок.Количество()=0 тогда
			МассивДолгов=ТаблицаДанных.Выгрузить(,"СсылкаДолг");	 
			МассивДолгов.Свернуть("СсылкаДолг");
			МассивДолгов=МассивДолгов.ВыгрузитьКолонку("СсылкаДолг") ;
			МассивДолгов.Удалить(МассивДолгов.Найти(Справочники.Долги.ПустаяСсылка()));
			ДолгиСписок=НайтиДолгВТекущемСписке(СтрокаДанных,МассивДолгов)
	   КонецЕсли;  
		     Возврат ДолгиСписок;
  
	  КонецФункции // НайтиДолги()  
	  
&НаСервере	  
	  Функция НайтиДолгВТекущемСписке(СтрокаДанных,МассивДолгов)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Долги.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Долги КАК Долги
		|ГДЕ
		|	Долги.НомерДоговораДолжника = &НомерДоговораДолжника
		|	И Долги.СуммаЗадолженности = &СуммаЗадолженности
		|	И Долги.Ссылка В(&МассивДолгов)";
	
	Запрос.УстановитьПараметр("МассивДолгов", МассивДолгов);
	Запрос.УстановитьПараметр("НомерДоговораДолжника", СтрокаДанных.НомерДоговораДолжника);
	Запрос.УстановитьПараметр("СуммаЗадолженности", СтрокаДанных.СуммаЗадолженности);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	 Возврат РезультатЗапроса;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА


	КонецФункции  
	
   &НаСервере
   Функция НайтиДолгиПоНОмеруДоговораКонтрагентСумма(СтрокаДанных)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Долги.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.ДолгиДолжников КАК ДолгиДолжников
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Долги КАК Долги
		|		ПО ДолгиДолжников.Долг = Долги.Ссылка и ДолгиДолжников.Должник=&Должник
		|ГДЕ
		|	Долги.НомерДоговораДолжника = &НомерДоговораДолжника
		|	И Долги.СуммаЗадолженности = &СуммаЗадолженности";
	
	Запрос.УстановитьПараметр("Должник", СтрокаДанных.Ссылка);
	Запрос.УстановитьПараметр("НомерДоговораДолжника", СтрокаДанных.НомерДоговораДолжника);
	Запрос.УстановитьПараметр("СуммаЗадолженности", СтрокаДанных.СуммаЗадолженности);

	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат РезультатЗапроса;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

   КонецФункции 
   
&НаСервере   
Процедура НайтиОбработатьДолжников(СтрокаДанных)
	  ДолжникСписок =НайтиДолжников(СтрокаДанных);
	  ОбработатьНайденныйДолжникСписок(СтрокаДанных,ДолжникСписок)
КонецПроцедуры	

&НаСервере
Функция НайтиДолжников(СтрокаДанных)
 //ДолжникСписок =НайтиДолжникаПоФИО(СтрокаДанных.Наименование);
 ДолжникСписок =НайтиДолжникаПоФИОДатаРОжденияПаспорт(СтрокаДанных.Наименование,СтрокаДанных.ДатаРОждения,СтрокаДанных.Серия,СтрокаДанных.Номер);
Возврат ДолжникСписок;	
КонецФункции
	
&НаСервере
Процедура ОбработатьНайденныйДолжникСписок(Ст,ДолжникСписок)
	//ТЗ=РеквизитФормыВЗначение("ТаблицаДанных");
	//Если ДолжникСписок.Количество()=1 тогда
	Для Каждого Должник из ДолжникСписок цикл
	Ст.Ссылка=ДолжникСписок[0];  
	Ст.ДолжникНайден=Истина;
	//	Нашли=Ложь;
	//	Для Каждого СтрокаНайденные из Ст.Строки цикл
	//		Если СтрокаНайденные.Ссылка=Должник тогда
	//			Нашли =Истина;
	//		КонецЕсли;	
	//
	//	КонецЦикла;	
	//	Если Не Нашли тогда
	//					НовСТ=Ст.Строки.Добавить();
	//		НовСТ.Ссылка=ДолжникСписок[0];
	//		ЗаполнитьЗначенияСвойств(НовСТ,ДолжникСписок[0]);
	//	КонецЕсли;	
	КонецЦикла;	
	//КонецЕсли;	
КонецПроцедуры


&НаСервере
Функция НайтиДолжникаПоФИО(ФИОСтрока)
	     	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Должники.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Должники КАК Должники
		|ГДЕ
		|	Должники.Наименование ПОДОБНО &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", ФИОСтрока);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат РезультатЗапроса;
	//Если РезультатЗапроса.Количество()=1 тогда
	//	Сообщить(РезультатЗапроса.Ссылка);
	//КонецЕсли;	
	
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецФункции	


&НаСервере
Функция НайтиДолжникаПоФИОДатаРОжденияПаспорт(ФИОСтрока,ДатаРОждения,Серия,Номер)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
|	ВЫБРАТЬ
|			Должники.Ссылка КАК Ссылка,
|			ДокументыФизическихЛиц.Физлицо КАК Физлицо
|		ИЗ
|			Справочник.Должники КАК Должники
|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
|				ПО Должники.Ссылка = ДокументыФизическихЛиц.Физлицо и ДокументыФизическихЛиц.ВидДокумента.ссылка=(ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ))
|		ГДЕ
|			Должники.Наименование ПОДОБНО &Наименование
|			И Должники.ДатаРождения = &ДатаРождения
|			И ДокументыФизическихЛиц.Серия = &Серия
|			И ДокументыФизическихЛиц.Номер = &Номер";
	
	Запрос.УстановитьПараметр("ДатаРождения", ДатаРОждения);
	Запрос.УстановитьПараметр("Наименование", ФИОСтрока);
	Запрос.УстановитьПараметр("Номер", Номер);
	Запрос.УстановитьПараметр("Серия", Серия);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	  //Перечисление.ВидыДокументовФизическихЛиц.
Возврат РезультатЗапроса;	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА


КонецФункции	


&НаСервере
Процедура ТестНаСервере()
	
	
КонецПроцедуры  
 
&НаСервере
Функция  ПолучитьСтруктуруДопПолей(ОбъектДанных)
	
КонецФункции
	
&НаСервере
Функция ПолучитьНовыйОбъект(ТипНовогоОбъекта)
	Переме = Тип(ТипНовогоОбъекта);  
Если Метаданные.Справочники.Содержит(Метаданные.НайтиПоТипу(Переме)) тогда
	Конт =Справочники[Метаданные.НайтиПоТипу(Переме).Имя].СоздатьЭлемент();
	Возврат Конт;
КонецЕсли;	                                                              
Если Метаданные.РегистрыСведений.Содержит(Метаданные.НайтиПоТипу(Переме)) тогда
	Конт =РегистрыСведений[Метаданные.НайтиПоТипу(Переме).Имя].СоздатьМенеджерЗаписи();
	Возврат Конт;
КонецЕсли;
Возврат Неопределено;
КонецФункции	

&НаКлиенте
Процедура Тест(Команда)
	//ТестНаСервере();
	//ПоискОшибокТаблицаДанныхКлиент(); 
	//Для Каждого Ст из ТаблицаДанных цикл
	//	Ст.ДолжникНайден =Истина;
	//КонецЦикла;
   //ЗакрытьОкноСообщений();
//   	ОкноСлСообщ = Новый COMОбъект("Wscript.shell"); 
//ОкноСлСообщ.SendKeys("^+{z}"); 
//ОкноСлСообщ.SendKeys("^+{я}"); 
ПопыткаПривестиПочтовыйАдресКФИАС("") ;
КонецПроцедуры   

&НаКлиенте
Процедура ЗакрытьОкноСообщений()
	ОкноСлСообщ = Новый COMОбъект("Wscript.shell"); 
ОкноСлСообщ.SendKeys("^+{z}"); 
//ОкноСлСообщ.SendKeys("^+{я}");	
КонецПроцедуры	

&НаКлиенте
Процедура ПоискОшибокТаблицаДанныхКлиент()
	МассивСтрокПроверок=Новый МАссив;
	Для Каждого СтрокаРеквизитов из ТаблицаРеквизитов цикл
		Если ЗначениеЗаполнено(СтрокаРеквизитов.ОбработкаПроверки) тогда
			МассивСтрокПроверок.Добавить(СтрокаРеквизитов);	
		КонецЕсли;	
	КонецЦикла	;   
	
	Для Каждого ЭлементПроверки из МассивСтрокПроверок цикл   
		Индекс=0;
		Для Каждого СтрокаДанных из  ТаблицаДанных.ПолучитьЭлементы() цикл  
			
			ДанныеПроверки=СтрокаДанных[ЭлементПроверки.Реквизит];
			ПроверкаПрошла=Истина;
			ОписаниеОшибки="";
			Выполнить(ПолучитьКодОбработкиНаСервере(ЭлементПроверки.ОбработкаПроверки));
		//	Элементы.ТаблицаДанных[Индекс]
			Если НЕ ПроверкаПрошла тогда
				СтрокаОшибки=ТаблицаОшибки.Добавить();
				СтрокаОшибки.Ошибка = ОписаниеОшибки;
				СтрокаОшибки.Текст = ОписаниеОшибки;     
				//эЛЕМЕНты["ТаблицаДанных.ПолучитьЭлементы()[" + СтрокаДанных.ПолучитьИдентификатор() + "]"]
				//				Сообщить(ТаблицаДанных.Индекс(СтрокаДанных));
				//	СтрокаОшибки.Поле ="ТаблицаДанных[" + СтрокаДанных.ПолучитьИдентификатор() + "]."+ЭлементПроверки.Реквизит; 	
				СтрокаОшибки.Поле ="ТаблицаДанных.ПолучитьЭлементы()[" + Индекс + "]."+ЭлементПроверки.Реквизит; 	
				//ТаблицаДанных.ПолучитьЭлементы()[2]
			КонецЕсли;
			Индекс=Индекс+1;
		КонецЦикла;	
	КонецЦикла;	 
	//Для Каждого СтрокаДанных из ТаблицаДанных.ПолучитьЭлементы() цикл
	//	Сообщить(СтрокаДанных.ПолучитьИдентификатор()); 
	//КонецЦикла;	 
	//
КонецПроцедуры	

&НаСервере
Функция ПолучитьКодОбработкиНаСервере(ОбработкаПроверки)
	Если ЗначениеЗаполнено(ОбработкаПроверки) тогда
		Возврат ОбработкаПроверки.КодОбработки
	КонецЕсли;
	Возврат "";
КонецФункции	

&НаСервере
Процедура ПоказатьОшибкиНаСервере()
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибки(Команда)
	ПоказатьОшибкиНаСервере();  
//	ТаблицаДанных.ОтборСтрок = Новый ФиксированнаяСтруктура("ЕстьОшибки", Истина);  
	Если Элементы.ТаблицаДанных.ОтборСтрок=Неопределено тогда
		Элементы.ТаблицаДанных.ОтборСтрок= Новый ФиксированнаяСтруктура("ЕстьОшибки", Истина)
	иначе
		Элементы.ТаблицаДанных.ОтборСтрок=Неопределено;
	КонецЕсли;
	ПроверкаОшибок(Истина);
КонецПроцедуры

&НаСервере
Процедура СоздатьОбъектыНаСервере()
	// Вставить содержимое обработчика. 
	ТЗРеквизиты =РеквизитФормыВЗначение("ТаблицаРеквизитов");
	ТЗРеквизиты.Свернуть("ОбъектДанных");
	СписокСоздаваемыхОбъектов =ТЗРеквизиты.ВыгрузитьКолонку("ОбъектДанных"); 
	ТЗРеквизиты =РеквизитФормыВЗначение("ТаблицаРеквизитов");
	ТЗДанные =ТаблицаДанных;//РеквизитФормыВЗначение("ТаблицаДанных"); 
	СписокСоздаваемыхОбъектов.Удалить(СписокСоздаваемыхОбъектов.Найти("ДокументСсылка.РеестрДолжников")); 
	
	Для Каждого ЭлементСписок из СписокСоздаваемыхОбъектов цикл
		Отбор = Новый Структура;
		Отбор.Вставить("ОбъектДанных", ЭлементСписок);		
		СписокРеквизитовОбъекта = ТЗРеквизиты.НайтиСтроки(Отбор);  
		  
		Для Каждого СтрокаДанных из ТаблицаДанных цикл 
			АнализСтрокиДанных(СтрокаДанных,ЭлементСписок);
			Если НужноСоздаватьНовыйОбъект(ЭлементСписок,СтрокаДанных) тогда
				НовыйОбъект =ПолучитьНовыйОбъект(ЭлементСписок); 
				Если НовыйОбъект<>Неопределено тогда
					
					НовыйОбъект = ЗаполнитьДаннымиТЧНовый(НовыйОбъект,СтрокаДанных,ЭлементСписок) ;
					Для Каждого Ст из СписокРеквизитовОбъекта цикл
						Если НЕ ЗначениеЗаполнено(Ст.ТабличнаяЧасть)и (Ст.Поле<>"Ссылка") тогда
							НовыйОбъект[Ст.Поле]= СтрокаДанных[Ст.Реквизит];
						КонецЕсли;	
		//				Если ЗначениеЗаполнено(Ст.ТабличнаяЧасть) тогда
		//					НовыйОбъект=ЗаполнитьДаннымиТЧ(НовыйОбъект,Ст,СтрокаДанных);
		//				КонецЕсли;	
		//
					КонецЦикла;	
					//ЗаполнитьЗначенияСвойств(НовыйОбъект,СтрокаДанных);
					ДополнитьЗначенияПолей(НовыйОбъект,СтрокаДанных);
					Попытка
						НовыйОбъект.Записать();
						ПослеЗаписи(НовыйОбъект,СтрокаДанных);
					Исключение
						Сообщить(ОписаниеОшибки());			
					КонецПопытки;	
				иначе
					Сообщить("Ошибка!!! не могу создать объект типа:"+ЭлементСписок);
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;	
// ЗначениеВРеквизитФормы(ТЗДанные, "ТаблицаДанных");
	
КонецПроцедуры  

&НаСервере
Функция НужноСоздаватьНовыйОбъект(ЭлементСписок,СтрокаДанных)  
	Если ЭлементСписок="СправочникСсылка.Должники" тогда
		Если ЗначениеЗаполнено(СтрокаДанных.Ссылка) тогда
		возврат Ложь;
		КонецЕсли;

	КонецЕсли;         
	Если ЭлементСписок="СправочникСсылка.Долги" тогда
		Если ЗначениеЗаполнено(СтрокаДанных.СсылкаДолг) тогда
		возврат Ложь;
		КонецЕсли;
	КонецЕсли; 
	возврат Истина;
КонецФункции	

&НаСервере
Функция ЗаполнитьДаннымиТЧНовый(НовыйОбъект,СтрокаДанных,ЭлементСписок)  
	 ТЗРеквизиты =РеквизитФормыВЗначение("ТаблицаРеквизитов");
	 ТЗРеквизитыТЧ = ТЗРеквизиты.Скопировать();
     Отбор = Новый Структура;
	 Отбор.Вставить("ОбъектДанных", ЭлементСписок);		
	 СписокРеквизитовОбъекта = ТЗРеквизиты.НайтиСтроки(Отбор);  
	 Для Каждого Реквизит из  СписокРеквизитовОбъекта цикл   
		 Если ЗначениеЗаполнено(Реквизит.ТабличнаяЧасть) тогда//Это табличная часть
			         Отбор = Новый Структура;
					 Отбор.Вставить("ОбъектДанных", ЭлементСписок);	
					 Отбор.Вставить("ТабличнаяЧасть", Реквизит.ТабличнаяЧасть);
					 Отбор.Вставить("ГруппаТЧ", Реквизит.ГруппаТЧ);
					 СтрокиГруппыТЧ = ТЗРеквизитыТЧ.НайтиСтроки(Отбор);
					 Если СтрокиГруппыТЧ.Количество()>0 тогда //Есть отобранные строки с ТЧ
						Если НужноСоздаватьСтрокуТЧ(СтрокиГруппыТЧ,СтрокаДанных) тогда						 
					 	 СтрокаТч =НовыйОбъект[Реквизит.ТабличнаяЧасть].Добавить();
						 Выполнить(Реквизит.Поля);
					
						 Для Каждого РеквизитГруппыТЧ из СтрокиГруппыТЧ цикл
						 	 СтрокаТч[РеквизитГруппыТЧ.Поле] =СтрокаДанных[РеквизитГруппыТЧ.Реквизит];
						 	 
						 	 Если РеквизитГруппыТЧ.Вид="Адрес" тогда
		 						Если  СтрокаДанных[РеквизитГруппыТЧ.Реквизит+"_Значение"]<>"" тогда
			 					СтрокаТч["Значение"] =СтрокаДанных[РеквизитГруппыТЧ.Реквизит+"_Значение"];
		 					КонецЕсли; 
						 	 КонецЕсли;
						 	ТЗРеквизитыТЧ.Удалить(РеквизитГруппыТЧ); 
						 КонецЦикла;
						 КонецЕсли;	 					 	
					 КонецЕсли;			
		 КонецЕсли;	 
	 КонецЦикла;	 
	 Возврат НовыйОбъект; 
	 
КонецФункции

&НаСервере
Функция НужноСоздаватьСтрокуТЧ(СтрокиГруппыТЧ,СтрокаДанных)
	НужноСоздавать = Ложь;
	 Для Каждого РеквизитГруппыТЧ из СтрокиГруппыТЧ цикл
	 	Если СтрокаДанных[РеквизитГруппыТЧ.Реквизит]<>"" тогда
	 		НужноСоздавать = Истина;
	 		Возврат НужноСоздавать;
	 	КонецЕсли;	
	 КонецЦикла;
	 Возврат НужноСоздавать;		
КонецФункции	

&НаСервере
Функция ЗаполнитьДаннымиТЧ(НовыйОбъект,СтрокаРеквизитов,СтрокаДанных)        
	Если СтрокаДанных[СтрокаРеквизитов.Реквизит]<>"" тогда
	 СтрокаТч =НовыйОбъект[СтрокаРеквизитов.ТабличнаяЧасть].Добавить();
	 Выполнить(СтрокаРеквизитов.Поля);
	 СтрокаТч[СтрокаРеквизитов.Поле] =СтрокаДанных[СтрокаРеквизитов.Реквизит];
	 Если СтрокаРеквизитов.Вид="Адрес" тогда
		 Если  СтрокаДанных[СтрокаРеквизитов.Реквизит+"_Значение"]<>"" тогда
			 СтрокаТч["Значение"] =СтрокаДанных[СтрокаРеквизитов.Реквизит+"_Значение"];
		 КонецЕсли; 
	 КонецЕсли;
	КонецЕсли; 
	 Возврат НовыйОбъект;
КонецФункции	


&НаСервере
Процедура ДополнитьЗначенияПолей(НовыйОбъект,СтрокаДанных)

   	Если ТипЗнч(НовыйОбъект)=Тип("РегистрСведенийМенеджерЗаписи.ДокументыФизическихЛиц") тогда
		НовыйОбъект.Физлицо = СтрокаДанных.Ссылка; 	
		НовыйОбъект.ВидДокумента=Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ;
		НовыйОбъект.Период =ТекущаяДата()
	КонецЕсли;
	  	Если ТипЗнч(НовыйОбъект)=Тип("СправочникОбъект.Долги") тогда
		НовыйОбъект.Контрагент =Контрагент; 	
		НовыйОбъект.Наименование=НовыйОбъект.НомерДоговораДолжника;
		НовыйОбъект.ДоговорКонтрагента=ДоговорКонтрагента;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура  ПослеЗаписи(НовыйОбъект,СтрокаДанных)
	Если ТипЗнч(НовыйОбъект)=Тип("СправочникОбъект.Должники") тогда
		СтрокаДанных.Ссылка =НовыйОбъект.Ссылка; 	
	КонецЕсли;	
	Если ТипЗнч(НовыйОбъект)=Тип("СправочникОбъект.Долги") тогда
		СтрокаДанных.СсылкаДолг =НовыйОбъект.Ссылка; 	
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура СоздатьОбъекты(Команда)
	СоздатьОбъектыНаСервере();
КонецПроцедуры

&НаСервере
Функция СоздатьРеестрНаСервере()
	// Вставить содержимое обработчика.
	ТЗДанные =РеквизитФормыВЗначение("ТаблицаДанных");
	ДокРеестр = Документы.РеестрДолжников.СоздатьДокумент();
	ДокРеестр.Дата =ТекущаяДата();
	ДокРеестр.Договор = ДоговорКонтрагента;
	ДокРеестр.Контрагент = Контрагент;
	Для Каждого СтрокаДанных из ТЗДанные цикл   
		Если СтрокаДанных.Пометка тогда
			Если ЗначениеЗаполнено(СтрокаДанных.Ссылка) и ЗначениеЗаполнено(СтрокаДанных.СсылкаДолг) тогда
					СтрокаДолжники = ДокРеестр.Должники.Добавить();	
				СтрокаДолжники.Долг=СтрокаДанных.СсылкаДолг;
				СтрокаДолжники.Должник=СтрокаДанных.Ссылка;
				СтрокаДолжники.СтатусДолжника = СтрокаДанных.СтатусДолжника;
				СтрокаДолжники.СуммаЗадолженности = СтрокаДанных.СуммаЗадолженности;
	
			КонецЕсли;	
	   КонецЕсли;
   КонецЦикла;	
   Попытка
   ДокРеестр.Записать(РежимЗаписиДокумента.Запись);
   Возврат ДокРеестр.Ссылка;
Исключение      
   Сообщить(ОписаниеОшибки());
   КонецПопытки;
КонецФункции

&НаКлиенте
Процедура СоздатьРеестр(Команда)
	СсылкаНаРеестр=СоздатьРеестрНаСервере();
	Если СсылкаНаРеестр<>Неопределено тогда
		ПоказатьЗначение(,СсылкаНаРеестр);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОшибкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	  Сообщение = Новый СообщениеПользователю;
	  Сообщение.Поле  =Элемент.ТекущиеДанные.Поле;
	  Сообщение.Текст =Элемент.ТекущиеДанные.Текст;
	  Сообщение.Сообщить();  //ТаблицаДанных.ПолучитьЭлементы()[2]
	
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Вставить содержимое обработчика 
  	ПараметрыЗаполнения = "";
	Если Параметры.Свойство("ПараметрыЗаполнения",ПараметрыЗаполнения) тогда
		Для Каждого Элемент из ПараметрыЗаполнения Цикл  
			Если ОбщийМодульПользовательский.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект,Элемент.Ключ) тогда
				ЭтотОбъект[Элемент.Ключ] =Элемент.Значение; 
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
			Если ЗначениеЗаполнено(НастройкаЗагрузки) тогда
		ЗагрузитьНастройкиВТаблицу(НастройкаЗагрузки,"ТаблицаРеквизитов");
		СоздатьКолонкиТаблицыДанных();
			КонецЕсли;	
		

КонецПроцедуры

&НаКлиенте
Процедура ОтметитьСнять(Команда)
	// Вставить содержимое обработчика.
	ДЛя Каждого СтрокаДанных из ТаблицаДанных цикл
		СтрокаДанных.Пометка=Не СтрокаДанных.Пометка;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкиТекущаяСтрока(Команда)
	// Вставить содержимое обработчика.  
		МассивСтрокПроверок=Новый МАссив;
	Для Каждого СтрокаРеквизитов из ТаблицаРеквизитов цикл
		Если ЗначениеЗаполнено(СтрокаРеквизитов.ОбработкаПроверки) тогда
			МассивСтрокПроверок.Добавить(СтрокаРеквизитов);	
		КонецЕсли;	
	КонецЦикла	;           
  
	СтрокаДанных = Элементы.ТаблицаДанных.ТекущиеДанные;
    Если СтрокаДанных<>Неопределено тогда
		 ПроверкаОшибокСтроки(СтрокаДанных,МассивСтрокПроверок,Истина);
		
	 КонецЕсли;
     // СообщениеПользователю
	 // ЗакрытьОкноСообщений(); 
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхПриАктивизацииЯчейки(Элемент)
	// Вставить содержимое обработчика. 
	//Сообщить(Элемент); 
	//МассивСтрокПроверок=Новый МАссив;
	//Для Каждого СтрокаРеквизитов из ТаблицаРеквизитов цикл
	//	Если ЗначениеЗаполнено(СтрокаРеквизитов.ОбработкаПроверки) тогда
	//		МассивСтрокПроверок.Добавить(СтрокаРеквизитов);	
	//	КонецЕсли;	
	//КонецЦикла;  
	//Для Каждого Ст из МассивСтрокПроверок цикл
	//Если   Элемент.ТекущийЭлемент.Имя=Ст.Реквизит тогда      
	//   	СтрокаДанных = Элементы.ТаблицаДанных.ТекущиеДанные;
	//Если СтрокаДанных<>Неопределено тогда
	//	 ПроверкаОшибокСтроки(СтрокаДанных,МассивСтрокПроверок,Истина);	
	// КонецЕсли;
	//                 
	//КонецЕсли;	
	//   КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВернутьСоответствиеАдреса() 
		НачСоответсвие = Новый Соответствие;
	НачСоответсвие.Вставить("index"				,"ПочтовыйИндекс");
	НачСоответсвие.Вставить("area"				,"Район");	
	НачСоответсвие.Вставить("building"			,"Строение");	
	НачСоответсвие.Вставить("corpus"			,"Корпус");	
	НачСоответсвие.Вставить("hotel"				,"НазваниеГостиницы");	
	НачСоответсвие.Вставить("house"				,"НомерЗдания");	
	НачСоответсвие.Вставить("location"			,"Микрорайон");
	НачСоответсвие.Вставить("num-address-type"	,"НомерАЯ");
	НачСоответсвие.Вставить("original-address"	,"НеобработанныйАдресПолучателя");
	НачСоответсвие.Вставить("place"				,"НаселенныйПункт");
	НачСоответсвие.Вставить("region"			,"ОбластьРегион");
	НачСоответсвие.Вставить("room"				,"НомерПомещения");
	НачСоответсвие.Вставить("slash"				,"Дробь");
	НачСоответсвие.Вставить("street"			,"Улица");
	НачСоответсвие.Вставить("street-guid"			,"street_guid");
	НачСоответсвие.Вставить("place-guid"			, "place_guid");
    НачСоответсвие.Вставить("address-guid"			,"address_guid");
    НачСоответсвие.Вставить("region-guid"			,"region_guid");  
    НачСоответсвие.Вставить("validation-code"			,"СтатусВалидации");  
    НачСоответсвие.Вставить("quality-code"			,"КачествоРаспознавания");  
   Возврат  НачСоответсвие;
КонецФункции	

&НаСервере
Процедура НормализоватьАдресаНаСервере(ИмяТаблицы) 
	ТаблицаАдреса = ЭтотОбъект[ИмяТаблицы];  
	МассивАдресов = Новый Массив; 
	МассивВыделенныхСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки; 
	Для каждого Мстр Из МассивВыделенныхСтрок Цикл 
		СтрокаАдреса=ТаблицаАдреса.НайтиПоИдентификатору(Мстр);
		МассивАдресов = ДобавитьАдресДляАнализа(МассивАдресов, СтрокаАдреса.ID,СтрокаАдреса.НеобработанныйАдресПолучателя)
	КонецЦикла;	
	
	Если массивАдресов.Количество()>0 тогда
		ПочтаОтвет =ПочтаРоссииОтправитьЗапрос(массивАдресов);
		НачСоответсвие = ВернутьСоответствиеАдреса();				 
		Для Каждого Соотв Из ПочтаОтвет Цикл
			//Если Соотв.Получить("validation-code") = "VALIDATED" и  (Соотв.Получить("quality-code") = "GOOD" или Соотв.Получить("quality-code") = "POSTAL_BOX" ) Тогда  // 
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ID",Соотв.Получить("id"));
			МассивСтрок = ТаблицаАдреса.НайтиСтроки(ПараметрыОтбора);
			Стр=МассивСтрок[0];
			Для Каждого Эл Из Соотв Цикл
				ИмяРекв = НачСоответсвие.Получить(Эл.Ключ);
				Если ИмяРекв<>неопределено Тогда
					Стр[ИмяРекв] = Эл.Значение;
				Конецесли;
			КонецЦикла;
			
			Если соотв.Получить("letter")<>неопределено Тогда
				Стр.НомерЗдания = Стр.НомерЗдания + соотв.Получить("letter");
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

	// Вставить содержимое обработчика.
КонецПроцедуры

//КНОПКА НОРМАЛИЗОВАТЬ!!!
&НаКлиенте
Процедура НормализоватьАдрес(Команда) 
	//Элементы[Команда.ИспользуемаяТаблица.Имя]
	НормализоватьАдресаНаСервере(Команда.ИспользуемаяТаблица.Имя);
	ПроверитьПочтовыйАдресНаОшибки(Команда.ИспользуемаяТаблица.Имя);
	АнализПривестиАдресаФИАС(Команда.ИспользуемаяТаблица.Имя);
КонецПроцедуры


 //КНОПКА ПОДТВЕРДИТЬ!!!
&НаКлиенте
Процедура ПодтвердитьАдрес(Команда) 
	ПодтвердитьАдресКлиент(Команда.ИспользуемаяТаблица.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьАдресКлиент(ИмяТаблицы)
	ТаблицаАдреса = ЭтотОбъект[ИмяТаблицы];	 
	
	МассивВыделенныхСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки; 
	Для каждого Мстр Из МассивВыделенныхСтрок Цикл 
		СтрокаАдреса=ТаблицаАдреса.НайтиПоИдентификатору(Мстр);
		СтрокаАдреса.РучнаяПроверка=Истина;
		СтрокаАдреса.АдресКорректен=Истина;   
		
		СтрокаДанных = ТаблицаДанных.НайтиПоИдентификатору(СтрокаАдреса.ID); 
		ИмяРеквизита = ПолучитьИмяПоляПоИмениТаблицы(ИмяТаблицы); 
		Если СтрокаДанных<>Неопределено тогда 
			Если СтрокаАдреса.АдресФИАС="" тогда 
			СтрокаДанных[ИмяРеквизита]=СтрокаАдреса.АдресПочта;	
				иначе
			СтрокаДанных[ИмяРеквизита]=СтрокаАдреса.АдресФИАС;
			КонецЕсли;
			СтрокаДанных[ИмяРеквизита+"_Значение"]=СтрокаАдреса.Значение;
		КонецЕсли;  
		
	КонецЦикла;

КонецПроцедуры	
                 

&НаКлиенте
Процедура ПоказатьОшибкиАдрес(Команда)   
	ТаблицаАдреса = ЭтотОбъект[Команда.ИспользуемаяТаблица.Имя];
	Если Элементы[Команда.ИспользуемаяТаблица.Имя].ОтборСтрок=Неопределено тогда
		Элементы[Команда.ИспользуемаяТаблица.Имя].ОтборСтрок= Новый ФиксированнаяСтруктура("АдресКорректен", Ложь) ;
	иначе
		Элементы[Команда.ИспользуемаяТаблица.Имя].ОтборСтрок=Неопределено;
	КонецЕсли;

	//НормализоватьАдресаНаСервере(Команда.ИспользуемаяТаблица.Имя);
	//АнализПривестиАдресаФИАС(Команда.ИспользуемаяТаблица.Имя);
КонецПроцедуры


&НаКлиенте
Процедура ПроверитьАдрес(Команда) 
	ПроверитьАдресНаСервере(Команда.ИспользуемаяТаблица.Имя)
//Сообщить(Команда)
КонецПроцедуры

&НаСервере
Процедура  ПроверитьАдресНаСервере(ИмяТаблицы)  
	 ТаблицаАдреса = ЭтотОбъект[ИмяТаблицы]; 
	 Если Элементы[ИмяТаблицы].ТекущаяСтрока<>Неопределено тогда
	 СтрокаДанных = ТаблицаАдреса[Элементы[ИмяТаблицы].ТекущаяСтрока];  
	 АнализПривестиСтрокуАдресаФИАС(СтрокаДанных,ИмяТаблицы);
	КонецЕсли;	 
КонецПроцедуры	

&НаСервере
Процедура АнализПривестиАдресаФИАС(ИмяТаблицы)
	ТаблицаАдреса = ЭтотОбъект[ИмяТаблицы];	 
	
	МассивВыделенныхСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки; 
	Для каждого Мстр Из МассивВыделенныхСтрок Цикл 
		СтрокаАдреса=ТаблицаАдреса.НайтиПоИдентификатору(Мстр);
		АнализПривестиСтрокуАдресаФИАС(СтрокаАдреса,ИмяТаблицы);
	КонецЦикла;
КонецПроцедуры	  

&НаСервере
Процедура ПроверитьПочтовыйАдресНаОшибки(ИмяТаблицы)
	ТаблицаАдреса = ЭтотОбъект[ИмяТаблицы];	   
	
	МассивВыделенныхСтрок = Элементы[ИмяТаблицы].ВыделенныеСтроки; 
	Для каждого Мстр Из МассивВыделенныхСтрок Цикл 
		СтрокаАдреса=ТаблицаАдреса.НайтиПоИдентификатору(Мстр);
		ПроверитьПочтовыйАдресНаОшибкиСтрока(СтрокаАдреса);
	КонецЦикла;	

КонецПроцедуры	

&НаСервере
Функция ПроверитьПочтовыйАдресНаОшибкиСтрока(СтрокаДанныхАдреса)
	ОписаниеОшибки="";
	Если СтрокаДанныхАдреса.СтатусВалидации="VALIDATED" тогда
		Если СтрокаДанныхАдреса.street_guid="" тогда
		ОписаниеОшибки=ОписаниеОшибки+"В адресе не заполнена улица";	
		КонецЕсли;
	    Если СтрокаДанныхАдреса.НомерЗдания="" тогда
		ОписаниеОшибки=ОписаниеОшибки+"В адресе не заполнен номер здания";	
		КонецЕсли;
	КонецЕсли;	  
	СтрокаДанныхАдреса.ОписаниеОшибки=ОписаниеОшибки;
КонецФункции
	
&НаСервере
Функция АнализПривестиСтрокуАдресаФИАС(СтрокаДанных,ИмяТаблицы) 
	Если СтрокаДанных.СтатусВалидации="VALIDATED" тогда 
		ПроверитьОбработатьРегионНаселенныйПукт(СтрокаДанных);			
		СтрокаДанных.АдресПочта = СформироватьАдресПочты(СтрокаДанных);
		Результат =  ПопыткаПривестиПочтовыйАдресКФИАС(СтрокаДанных);
		Если Не Результат тогда
			СтрокаДанных.ОбластьРегионФИАС = ПолучитьОбъектПОИдентификатору(СтрокаДанных.region_guid);
			СтрокаДанных.НаселенныйПунктФИАС = ПолучитьОбъектПОИдентификатору(СтрокаДанных.place_guid);
			СтрокаДанных.УлицаФИАС = ПолучитьОбъектПОИдентификатору(СтрокаДанных.street_guid); 
			СтрокаДанных.АдресКорректен=Ложь;
		иначе
			//Адрес проставить в поля данных 
			СтрокаДанных.АдресКорректен=Истина;
			 ЗаполнитьАдресВДанных(СтрокаДанных,ИмяТаблицы);
		КонецЕсли;	
	КонецЕсли; 
КонецФункции

&НаСервере 
Функция ЗаполнитьАдресВДанных(СтрокаДанныхАдреса,ИмяТаблицы)
	 ИмяРеквизита = ПолучитьИмяПоляПоИмениТаблицы(ИмяТаблицы);
	 СтрокаДанных = ТаблицаДанных.НайтиПоИдентификатору(СтрокаДанныхАдреса.ID);   
	 Если СтрокаДанных<>Неопределено тогда 
		 СтрокаДанных[ИмяРеквизита]=СтрокаДанныхАдреса.АдресФИАС; 
		 СтрокаДанных[ИмяРеквизита+"_Значение"]=СтрокаДанныхАдреса.Значение;

	КонецЕсли;	 
 КонецФункции
 
  &НаСервере                                     
 Функция ПолучитьИмяПоляПоИмениТаблицы(ИмяТаблицы)   
	// ТаблицаАдреса_Представление 
	Вхождение = СтрНайти(ИмяТаблицы,"_",НаправлениеПоиска.СНачала); 
	Возврат Сред(ИмяТаблицы,Вхождение+1);
 КонецФункции   

&НаСервере
 Функция ПолучитьОбъектПОИдентификатору(ИдентификаторСтрока)
	 Если ИдентификаторСтрока="" тогда
		 Возврат "";
	 КонецЕсли; 
	 ДанныеФИАС=НайтДанныеИЗФИАС(Новый УникальныйИдентификатор(ИдентификаторСтрока));
	 Если ДанныеФИАС<>Неопределено тогда
		 Возврат ДанныеФИАС.Сокращение+" "+ДанныеФИАС.Наименование;
	КонецЕсли;	 
	Возврат ""; 
	 
КонецФункции 

&НаСервере
 Функция НайтДанныеИЗФИАС(Идентификатор)
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АдресныеОбъекты.Идентификатор КАК Идентификатор,
		|	АдресныеОбъекты.КодСубъектаРФ КАК КодСубъектаРФ,
		|	АдресныеОбъекты.РодительскийИдентификатор КАК РодительскийИдентификатор,
		|	АдресныеОбъекты.МуниципальныйРодительскийИдентификатор КАК МуниципальныйРодительскийИдентификатор,
		|	АдресныеОбъекты.Наименование КАК Наименование,
		|	АдресныеОбъекты.Сокращение КАК Сокращение,
		|	АдресныеОбъекты.КодКЛАДР КАК КодКЛАДР,
		|	АдресныеОбъекты.ДополнительныеАдресныеСведения КАК ДополнительныеАдресныеСведения,
		|	АдресныеОбъекты.Уровень КАК Уровень
		|ИЗ
		|	РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
		|ГДЕ
		|	АдресныеОбъекты.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий()тогда
		//	Сообщить("Нашли объект с идентификатором "+Идентификатор);

		Возврат ВыборкаДетальныеЗаписи;
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	КонецЕсли;                         
	//
//	Сообщить("Не нашли объект с идентификатором "+Идентификатор);
	Возврат Неопределено;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецФункции
  &НаСервере 
  Функция   ДополнимАдресФИАСДаннымиОДоме(АдресСтруктура,СтрокаДанныхАдреса)
	   АдресСтруктура.houseNumber=СтрокаДанныхАдреса.НомерЗдания;
	   АдресСтруктура.houseType="Дом";  
	   
	   АдресСтруктура.apartments.Очистить();
	   Если СтрокаДанныхАдреса.НомерПомещения<>"" тогда
		   НовыйСоответствиеКвартира = Новый Структура; 
		   НовыйСоответствиеКвартира.Вставить("type","Квартира");
		   НовыйСоответствиеКвартира.Вставить("number",СтрокаДанныхАдреса.НомерПомещения);
		   АдресСтруктура.apartments.добавить(НовыйСоответствиеКвартира);
	   КонецЕсли;   
	   	   АдресСтруктура.buildings.Очистить();
	   Если СтрокаДанныхАдреса.Корпус<>"" тогда
		   НовыйСоответствиеПомещения = Новый Структура; 
		   НовыйСоответствиеПомещения.Вставить("type","Корпус");
		   НовыйСоответствиеПомещения.Вставить("number",СтрокаДанныхАдреса.Корпус);
		   АдресСтруктура.buildings.добавить(НовыйСоответствиеПомещения);
		КонецЕсли; 
	   	  Если СтрокаДанныхАдреса.Строение<>"" тогда
		   НовыйСоответствиеПомещения = Новый Структура; 
		   НовыйСоответствиеПомещения.Вставить("type","Строение");
		   НовыйСоответствиеПомещения.Вставить("number",СтрокаДанныхАдреса.Строение);
		   АдресСтруктура.buildings.добавить(НовыйСоответствиеПомещения);
	   КонецЕсли; 
	   РаботаСАдресамиКлиентСервер.ОбновитьПредставлениеАдреса(АдресСтруктура, Ложь);
	  
	  // АдресСтруктура.value = Обработки.РасширенныйВводКонтактнойИнформации.ПредставлениеНаселенногоПункта(АдресСтруктура);
	   Возврат АдресСтруктура; 
  КонецФункции 
	
	&НаСервере 
	Функция ПростоНетДомаВБазе(СтрокаДанныхАдреса)
		Если СтрокаДанныхАдреса.street_guid="" тогда
			Возврат Ложь;
		КонецЕсли;
		Если СтрокаДанныхАдреса.НомерЗдания="" тогда
			Возврат Ложь;
		КонецЕсли;
	Улица = ПолучитьОбъектПОИдентификатору(СтрокаДанныхАдреса.street_guid);
	Если Улица="" тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	Конецфункции	
