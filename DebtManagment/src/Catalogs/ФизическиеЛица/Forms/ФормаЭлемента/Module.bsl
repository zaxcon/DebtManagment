#Область ПрограммныйИнтерфейс

// Вопрос о несоответствии магазина настройкам.
// 
// Параметры:
//  Ответ - КодВозвратаДиалога - код возврата диалога.
//  Параметры - Струкутура - структура дополнительных параметров.
//
&НаКлиенте
Процедура НесоответствиеМагазинаНастройкамВопрос(Ответ, Параметры) Экспорт
	
	Если Ответ = "Отменить" Тогда
		Объект.Магазин = Параметры.МагазинСмен;
	Иначе
		УдалитьНастройкиСотрудника(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//ор_ПрограммноеСозданиеЭлементовФорм.СоздатьЭлементыФормы(ЭтаФорма);
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обработчик подсистемы "Свойства".
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, "СтраницаКонтактнаяИнформация", ПоложениеЗаголовкаЭлементаФормы.Лево);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	ЗаполнитьФИО();
	
	ПодготовитьФормуНаСервере();
	
	ОбщегоНазначенияУЗКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	УстановитьДоступностьЭлементовФормы();
	
	АвтоНаименованиеФизЛица();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ЗагруженАдресныйКлассификатор" Тогда
		Элементы.ДекорацияАдресныйКлассификаторНеЗагружен.Видимость = АдресныйКлассификаторПуст();
	ИначеЕсли ИмяСобытия = "СкрытыПерсональныеДанные" Тогда
		ЗаполнитьФИО();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ЗащитаПерсональныхДанных
	//ЗащитаПерсональныхДанныхКлиент.ОбработкаОповещенияФормы(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.ЗащитаПерсональныхДанных
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	//ор_ПрограммноеСозданиеЭлементовФорм.СоздатьЭлементыФормы(ЭтаФорма);

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ДатаСеансаТекущая = ТекущаяДатаСеанса();
	СтруктураЗаписи = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(ДатаСеансаТекущая, Новый Структура("ФизЛицо", ТекущийОбъект.Ссылка));
	Если СтруктураЗаписи.Фамилия <> Фамилия
		ИЛИ СтруктураЗаписи.Отчество <> Отчество
		ИЛИ СтруктураЗаписи.Имя <> Имя Тогда
		МенеджерЗаписи = РегистрыСведений.ФИОФизЛиц.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ФизЛицо = ТекущийОбъект.Ссылка;
		МенеджерЗаписи.Период = ДатаСеансаТекущая;
		МенеджерЗаписи.Фамилия = Фамилия;
		МенеджерЗаписи.Имя = Имя;
		МенеджерЗаписи.Отчество = Отчество;
		МенеджерЗаписи.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если НЕ Элементы.Наименование.СписокВыбора.НайтиПоЗначению(Объект.Наименование) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Наименование = СокрЛП(Объект.Наименование);
	Если НЕ ПустаяСтрока(Объект.Наименование) Тогда
		// Удаление двойных пробелов
		Пока Найти(Объект.Наименование, "  ") > 0 Цикл
			Объект.Наименование = СтрЗаменить(Объект.Наименование, "  ", " ");
		КонецЦикла;
		Наименование = Объект.Наименование;
		ЧислоВхождений = СтрЧислоВхождений(Наименование, " ");
		
		Если ЧислоВхождений = 0 Тогда
			Фамилия = Наименование;
			Имя = "";
			Отчество = "";
		ИначеЕсли ЧислоВхождений = 1 Тогда
			ПозицияСимволаПробела = Найти(Наименование, " ");
			Фамилия = Лев(Наименование, ПозицияСимволаПробела - 1);
			Имя = Сред(Наименование, ПозицияСимволаПробела + 1);
			Отчество = "";
		Иначе
			ЧислоПропусков = ЧислоВхождений - 2;
			НаименованиеВОбработке = Наименование;
			Для Индекс = 1 По ЧислоВхождений Цикл
				ПозицияСимволаПробела = Найти(НаименованиеВОбработке, " ");
				НаименованиеВОбработке = Сред(НаименованиеВОбработке, ПозицияСимволаПробела + 1);
				Если ЧислоПропусков > 0 Тогда
					ЧислоПропусков = ЧислоПропусков - 1;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ДлинаИмениИОтчества = СтрДлина(НаименованиеВОбработке);
			ДлинаНаименования   = СтрДлина(Наименование);
			ПозицияСимволаПробела = ДлинаНаименования - ДлинаИмениИОтчества;
			Фамилия     = Лев(Наименование, ПозицияСимволаПробела - 1);
			
			ПозицияСимволаПробела = Найти(НаименованиеВОбработке, " ");
			Имя      = Лев(НаименованиеВОбработке, ПозицияСимволаПробела - 1);
			Отчество = Сред(НаименованиеВОбработке, ПозицияСимволаПробела + 1)
		КонецЕсли;
		
		АвтоНаименованиеФизЛица();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАдресныйКлассификаторНеЗагруженОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	Если НавигационнаяСсылкаФорматированнойСтроки = "ЗагрузитьАдресныйКлассификатор" Тогда
		СтандартнаяОбработка = Ложь;
		АдресныйКлассификаторКлиент.ЗагрузитьАдресныйКлассификатор();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МагазинПриИзменении(Элемент)
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		МагазинСмен = МагазинСменСотрудника(Объект.Ссылка);
		
		Если МагазинСмен <> Неопределено И Объект.Магазин <> МагазинСмен Тогда
			
			ПараметрыОповещения = Новый Структура("МагазинСмен", МагазинСмен);
			ОповещениеВопрос = Новый ОписаниеОповещения(
				"НесоответствиеМагазинаНастройкамВопрос", 
				ЭтотОбъект, 
				ПараметрыОповещения);
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("Отменить", 		НСтр("ru = 'Отменить'"));
			Кнопки.Добавить("УдалитьНастройки", НСтр("ru = 'Удалить'"));
			
			ТекстВопроса = СтрШаблон(
				НСтр("ru = 'В рабочих сменах сотрудника используется магазин ""%1"". В случае изменения магазина все работы выполняемые сотрудником будут удалены.'"), МагазинСмен);
			
			ПоказатьВопрос(
				ОповещениеВопрос,
				ТекстВопроса,
				Кнопки,
				,
				"Отменить",
				Нстр("ru='Настройки работ сотрудника'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьКартинкуДляКомментария", 0.5, Истина);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	МодульУправлениеКонтактнойИнформациейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	МодульУправлениеКонтактнойИнформациейКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область КонтактнаяИнформация

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	
	МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	
	МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
	МодульУправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	МодульУправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы()
	
	ЭлементНастройкиРабот = Элементы.Найти("НастроитьРаботыСотрудника");
	Если ЭлементНастройкиРабот <>  Неопределено Тогда
		ЭлементНастройкиРабот.Видимость = Объект.Сотрудник;
	КонецЕсли;
	
	Если Объект.Сотрудник Тогда
		Элементы.ГруппаМагазин.ТекущаяСтраница = Элементы.СтраницаМагазин;
	Иначе
		Элементы.ГруппаМагазин.ТекущаяСтраница = Элементы.СтраницаПустышка;
	КонецЕсли;
	
	Элементы.Пол.АвтоОтметкаНезаполненного          = Объект.Сотрудник;
	Элементы.ДатаРождения.АвтоОтметкаНезаполненного = Объект.Сотрудник;
	
	Если Не Объект.Сотрудник Тогда
		Элементы.Пол.ОтметкаНезаполненного          = Объект.Сотрудник;
		Элементы.ДатаРождения.ОтметкаНезаполненного = Объект.Сотрудник;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФИО()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ФИОФизЛицСрезПоследних.Фамилия  КАК Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя      КАК Имя,
	|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ФИОФизЛицСрезПоследних
	|ГДЕ
	|	ФИОФизЛицСрезПоследних.ФизЛицо = &ФизЛицо
	|");
	Запрос.УстановитьПараметр("ФизЛицо", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Фамилия = Выборка.Фамилия;
	Имя = Выборка.Имя;
	Отчество = Выборка.Отчество;
	
КонецПроцедуры

&НаКлиенте
Функция АвтоНаименованиеФизЛица()
	
	Имя = СокрЛП(Имя);
	
	Элементы.Наименование.СписокВыбора.Очистить();
	
	СтрокаНаименования = "";
	Если НЕ ПустаяСтрока(Фамилия) Тогда
		ЕстьИмя = Не ПустаяСтрока(Имя);
		ЕстьОтчество = НЕ ПустаяСтрока(Отчество);
		Разделитель1 = ?(ЕстьИмя, " ", ""); 
		Разделитель2 = ?(ЕстьОтчество, " ", ""); 
		СтрокаНаименования = Фамилия + Разделитель1 + Имя + Разделитель2 + Отчество;
		Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
		Если ЕстьИмя Тогда
			СтрокаНаименования = Фамилия + " " + Лев(Имя,1) + ".";
			Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
			Если ЕстьОтчество Тогда
				СтрокаНаименования = Фамилия + " " + Лев(Имя,1) + ". " + Лев(Отчество,1) + ".";
				Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрокаНаименования;
	
КонецФункции

&НаКлиенте
Процедура ФамилияПриИзменении(Элемент)
	Фамилия = СокрЛП(Фамилия);
	АвтоНаименованиеФизЛица()
КонецПроцедуры

&НаКлиенте
Процедура ИмяПриИзменении(Элемент)
	АвтоНаименованиеФизЛица()
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоПриИзменении(Элемент)
	Отчество = СокрЛП(Отчество);
	АвтоНаименованиеФизЛица()
КонецПроцедуры

&НаСервереБезКонтекста
Функция МагазинСменСотрудника(Сотрудник)
	
	Магазин = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РаботаСотрудников.Смена.Магазин КАК Магазин
		|ИЗ
		|	РегистрСведений.РаботаСотрудников КАК РаботаСотрудников
		|ГДЕ
		|	РаботаСотрудников.Сотрудник = &Сотрудник";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Магазин = Выборка.Магазин;
	КонецЕсли;
	
	Возврат Магазин;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьНастройкиСотрудника(Сотрудник)
	
	РегистрыСведений.РаботаСотрудников.УдалитьЗаписиРаботыСотрудника(Сотрудник);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	Элементы.ДекорацияАдресныйКлассификаторНеЗагружен.Видимость = АдресныйКлассификаторПуст();
	
	Текст = СтрШаблон(
		НСтр("ru = 'Для автоподбора и выбора адресных сведений необходимо <a href = %1 >загрузить классификатор</a>.'"),
		"ЗагрузитьАдресныйКлассификатор");
		ФорматированнаяСтрока = СтроковыеФункции.ФорматированнаяСтрока(Текст);
		Элементы.ДекорацияАдресныйКлассификаторНеЗагружен.Заголовок = ФорматированнаяСтрока;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция АдресныйКлассификаторПуст()
	Возврат НЕ АдресныйКлассификатор.АдресныйКлассификаторЗагружен();
КонецФункции

&НаКлиенте
Процедура Подключаемый_УстановитьКартинкуДляКомментария()
	ОбщегоНазначенияКлиентСервер.УстановитьКартинкуДляКомментария(Элементы.СтраницаКомментарий, Объект.Комментарий);
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте                                     
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ОбновленоФизЛицо",,Объект.Ссылка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

