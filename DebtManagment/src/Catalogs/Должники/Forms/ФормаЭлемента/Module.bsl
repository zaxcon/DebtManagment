&НаКлиенте
Процедура СписокМестаРаботыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
			Отказ=Истина;
	Оповещение= Новый ОписаниеОповещения("ОбработатьДобавлениеМестаРаботы", ЭтотОбъект);
	ОткрытьФорму("Справочник.Должники.Форма.ФормаМестаРаботы",
		Новый Структура("ПараметрыЗаполнения", ПолучитьСтруктуруПараметровМестоРаботы()), Элемент, , , , Оповещение,
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДобавлениеМестаРаботы(Результат, ДопПарметры) Экспорт
	Если Результат <> Неопределено Тогда
		ДобавитьНовоеМестоРаботы(Результат);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьНовоеМестоРаботы(ПараметрыМестоРаботы)
	ЗаполнитьЗначенияСвойств(Объект.МестаРаботы.Добавить(), ПараметрыМестоРаботы);
КонецПроцедуры
&НаСервере		
Функция ПолучитьСтруктуруПараметровМестоРаботы()
	 
	НоваяСтрокаМестоРаботы=Объект.МестаРаботы.Выгрузить().Добавить();
	ПараметрыОткрытия = ОбщийМодульПользовательский.СтрокаТаблицыЗначенийВСтруктуру(НоваяСтрокаМестоРаботы);
	ПараметрыОткрытия.Вставить("Должник", Объект.Ссылка);
	Возврат ПараметрыОткрытия;
КонецФункции

&НаКлиенте
Процедура СписокМестаРаботыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
					СтандартнаяОбработка=Ложь;
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ПараметрыОткрытия=ПолучитьСтруктуруПараметровМестоРаботы();
		ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, Элемент.ТекущиеДанные);

		ДопПараметры=Новый Структура;
		ДопПараметры.Вставить("Владелец", Элемент);
		Оповещение= Новый ОписаниеОповещения("ОбработатьИзменениеМестаРаботы", ЭтотОбъект, ДопПараметры);
		ОткрытьФорму("Справочник.Должники.Форма.ФормаМестаРаботы",
			Новый Структура("ПараметрыЗаполнения", ПараметрыОткрытия), Элемент, , , , Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

  &НаКлиенте
 Процедура ОбработатьИзменениеМестаРаботы(Результат,ДопПарметры) Экспорт  
	Если Результат<>Неопределено тогда 
		Ст =ДопПарметры.Владелец.ТекущиеДанные; 
		ЗаполнитьЗначенияСвойств(Ст,Результат);
		КонецЕсли;	  
КонецПроцедуры

	

&НаКлиенте
Процедура СписокТранспортПередНачаломДобавления1(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
		Отказ=Истина;
	Оповещение= Новый ОписаниеОповещения("ОбработатьДобавлениеТранспорта", ЭтотОбъект);
	ОткрытьФорму("Справочник.Должники.Форма.ФормаТранспорт",
		Новый Структура("ПараметрыЗаполнения", ПолучитьСтруктуруПараметровТранспорт()), Элемент, , , , Оповещение,
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура СписокНедвижимостьПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
		Отказ=Истина;
	Оповещение= Новый ОписаниеОповещения("ОбработатьДобавлениеНедвижимости", ЭтотОбъект);
	ОткрытьФорму("Справочник.Должники.Форма.ФормаНедвижимость",
		Новый Структура("ПараметрыЗаполнения", ПолучитьСтруктуруПараметровНедвижимость()), Элемент, , , , Оповещение,
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДобавлениеНедвижимости(Результат, ДопПарметры) Экспорт
	Если Результат <> Неопределено Тогда
		ДобавитьНовуюНедвижимость(Результат);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьНовуюНедвижимость(ПараметрыНедвижимость)
	ЗаполнитьЗначенияСвойств(Объект.Недвижимость.Добавить(), ПараметрыНедвижимость);
КонецПроцедуры	

&НаКлиенте
Процедура СписокНедвижимостьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
				СтандартнаяОбработка=Ложь;
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ПараметрыОткрытия=ПолучитьСтруктуруПараметровНедвижимость();
		ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, Элемент.ТекущиеДанные);

		ДопПараметры=Новый Структура;
		ДопПараметры.Вставить("Владелец", Элемент);
		Оповещение= Новый ОписаниеОповещения("ОбработатьИзменениеНедвижимости", ЭтотОбъект, ДопПараметры);
		ОткрытьФорму("Справочник.Должники.Форма.ФормаНедвижимость",
			Новый Структура("ПараметрыЗаполнения", ПараметрыОткрытия), Элемент, , , , Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

  &НаКлиенте
 Процедура ОбработатьИзменениеНедвижимости(Результат,ДопПарметры) Экспорт  
	Если Результат<>Неопределено тогда 
		Ст =ДопПарметры.Владелец.ТекущиеДанные; 
		ЗаполнитьЗначенияСвойств(Ст,Результат);
		КонецЕсли;	  
КонецПроцедуры



&НаКлиенте
Процедура СписокТранспортВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
			СтандартнаяОбработка=Ложь;
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ПараметрыОткрытия=ПолучитьСтруктуруПараметровТранспорт();
		ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, Элемент.ТекущиеДанные);

		ДопПараметры=Новый Структура;
		ДопПараметры.Вставить("Владелец", Элемент);
		Оповещение= Новый ОписаниеОповещения("ОбработатьИзменениеТранспорта", ЭтотОбъект, ДопПараметры);
		ОткрытьФорму("Справочник.Должники.Форма.ФормаТранспорт",
			Новый Структура("ПараметрыЗаполнения", ПараметрыОткрытия), Элемент, , , , Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

  &НаКлиенте
 Процедура ОбработатьИзменениеТранспорта(Результат,ДопПарметры) Экспорт  
	Если Результат<>Неопределено тогда 
		Ст =ДопПарметры.Владелец.ТекущиеДанные; 
		ЗаполнитьЗначенияСвойств(Ст,Результат);
		КонецЕсли;	  
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьДобавлениеТранспорта(Результат, ДопПарметры) Экспорт
	Если Результат <> Неопределено Тогда
		ДобавитьНовыйТранспорт(Результат);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьНовыйТранспорт(ПараметрыТранспорт)
	ЗаполнитьЗначенияСвойств(Объект.Транспорт.Добавить(), ПараметрыТранспорт);
КонецПроцедуры	

&НаСервере		
Функция ПолучитьСтруктуруПараметровТранспорт()
	 
	НоваяСтрокаТранспорт=Объект.Транспорт.Выгрузить().Добавить();
	ПараметрыОткрытия = ОбщийМодульПользовательский.СтрокаТаблицыЗначенийВСтруктуру(НоваяСтрокаТранспорт);
	ПараметрыОткрытия.Вставить("Должник", Объект.Ссылка);
	Возврат ПараметрыОткрытия;
КонецФункции

&НаСервере		
Функция ПолучитьСтруктуруПараметровНедвижимость()
	 
		    НоваяСтрокаНедвижимость=Объект.Недвижимость.Выгрузить().Добавить();
			ПараметрыОткрытия = ОбщийМодульПользовательский.СтрокаТаблицыЗначенийВСтруктуру(НоваяСтрокаНедвижимость);
			ПараметрыОткрытия.Вставить("Должник",Объект.Ссылка); 
			
Возврат ПараметрыОткрытия;
КонецФункции

&НаКлиенте
Процедура СписокМессенджерыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	Отказ=Истина;
	Оповещение= Новый ОписаниеОповещения("ОбработатьДобавлениеМессенджера", ЭтотОбъект);
	ОткрытьФорму("Обработка.РасширенныйВводКонтактнойИнформации.Форма.ФормаВводСоцсети",
		Новый Структура("ПараметрыЗаполнения", ПолучитьСтруктуруПараметровМессенджер()), Элемент, , , , Оповещение,
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
КонецПроцедуры

&НаКлиенте
Процедура СоцсетиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Вставить содержимое обработчика.   
			СтандартнаяОбработка=Ложь;   
			Если Элемент.ТекущиеДанные<>Неопределено тогда
    		ПараметрыОткрытия=ПолучитьСтруктуруПараметровСоцСети();
			ЗаполнитьЗначенияСвойств(ПараметрыОткрытия,Элемент.ТекущиеДанные);
    		
    		ДопПараметры=Новый Структура;
    		ДопПараметры.Вставить("Владелец",Элемент);
    		Оповещение= НОвый ОписаниеОповещения("ОбработатьИзменениеСоцСети",ЭтотОбъект,ДопПараметры);  
			ОткрытьФорму("Обработка.РасширенныйВводКонтактнойИнформации.Форма.ФормаВводСоцсети",Новый Структура("ПараметрыЗаполнения",ПараметрыОткрытия),Элемент,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокМессенджерыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
			СтандартнаяОбработка=Ложь;   
			Если Элемент.ТекущиеДанные<>Неопределено тогда
    		ПараметрыОткрытия=ПолучитьСтруктуруПараметровМессенджер();
			ЗаполнитьЗначенияСвойств(ПараметрыОткрытия,Элемент.ТекущиеДанные);
    		
    		ДопПараметры=Новый Структура;
    		ДопПараметры.Вставить("Владелец",Элемент);
    		Оповещение= НОвый ОписаниеОповещения("ОбработатьИзменениеМессенджера",ЭтотОбъект,ДопПараметры);  
			ОткрытьФорму("Обработка.РасширенныйВводКонтактнойИнформации.Форма.ФормаВводСоцсети",Новый Структура("ПараметрыЗаполнения",ПараметрыОткрытия),Элемент,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;

КонецПроцедуры


		&НаКлиенте
		Процедура ОбработатьДобавлениеСоцсети(Результат,ДопПарметры) Экспорт  
			Если Результат<>Неопределено тогда   
				ДобавитьНовуюСоцсеть(Результат);	
			КонецЕсли;  
КонецПроцедуры

	&НаСервере		
		Процедура ДобавитьНовыйМессенджер(ПараметрыСоцСети)   
			ЗаполнитьЗначенияСвойств(Объект.Мессенджеры.Добавить(),ПараметрыСоцСети);
		КонецПроцедуры	
	
	
			&НаКлиенте
		Процедура ОбработатьДобавлениеМессенджера(Результат,ДопПарметры) Экспорт  
			Если Результат<>Неопределено тогда   
				ДобавитьНовыйМессенджер(Результат);	
			КонецЕсли;  
		КонецПроцедуры
&НаСервере		
		Процедура ДобавитьНовуюСоцсеть(ПараметрыСоцСети)   
			ЗаполнитьЗначенияСвойств(Объект.Соцсети.Добавить(),ПараметрыСоцСети);
		КонецПроцедуры	

  &НаКлиенте
 Процедура ОбработатьИзменениеСоцСети(Результат,ДопПарметры) Экспорт  
	Если Результат<>Неопределено тогда 
		Ст =ДопПарметры.Владелец.ТекущиеДанные; 
		ЗаполнитьЗначенияСвойств(Ст,Результат);
		КонецЕсли;
	  
КонецПроцедуры

  &НаКлиенте
 Процедура ОбработатьИзменениеМессенджера(Результат,ДопПарметры) Экспорт  
	Если Результат<>Неопределено тогда 
		Ст =ДопПарметры.Владелец.ТекущиеДанные; 
		ЗаполнитьЗначенияСвойств(Ст,Результат);
		КонецЕсли;	  
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Вставить содержимое обработчика
	 ОбновитьЭлементыФормы();  
	 ПеречитатьСписокНаСервере();
	 ПрочитатьПаспортныеДанные();
	 ЗаполнитьДопРеквизиты();   
	 ПроверитьАдрес();
 КонецПроцедуры  
      
 &НаСервере
 Процедура ПроверитьАдрес()
 
	 Для Каждого Ст из Объект.КонтактнаяИнформация цикл
		 Ст.ЕстьАдрес=ЗначениеЗаполнено(Ст.Адрес);
	КонецЦикла;	 
 
 КонецПроцедуры
 

 &НаСервере
 Процедура ЗаполнитьДопРеквизиты()
	 Если ЗначениеЗаполнено(Объект.Ссылка)  тогда
	КоличествоДолгов =ПолучитьКоличествоДолговДолжника(Объект.Ссылка);
	ОбщийОбъемЗадолженности=ПолучитьОбщуюСуммуЗадолженностиДолжника(Объект.Ссылка)
	КонецЕсли;
КонецПроцедуры	
 
&НаСервере
Функция ПолучитьКоличествоДолговДолжника(Должник)
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДолгиДолжников.Долг) КАК КоличествоДолгов
		|ИЗ
		|	РегистрСведений.ДолгиДолжников КАК ДолгиДолжников
		|ГДЕ
		|	ДолгиДолжников.Должник = &Должник";
	
	Запрос.УстановитьПараметр("Должник", Должник);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	РезультатЗапроса.Следующий();
	Возврат   РезультатЗапроса.КоличествоДолгов;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецФункции	
&НаСервере
Функция ПолучитьОбщуюСуммуЗадолженностиДолжника(Должник)  
	   	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ОстаткиДолговОстатки.СуммаОстаток) КАК СуммаОстатокДолгов
		|ИЗ
		|	РегистрСведений.ДолгиДолжников КАК ДолгиДолжников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиДолгов.Остатки КАК ОстаткиДолговОстатки
		|		ПО ДолгиДолжников.Долг = ОстаткиДолговОстатки.Долг
		|ГДЕ
		|	ДолгиДолжников.Должник = &Должник";
	
	Запрос.УстановитьПараметр("Должник", Должник);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	РезультатЗапроса.Следующий();
	Возврат   РезультатЗапроса.СуммаОстатокДолгов;
	
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

   
КонецФункции // ПолучитьОбщуюСуммуЗадолженностиДолжника()
&НаСервере
Процедура ПрочитатьПаспортныеДанные()
	если ЗначениеЗаполнено(Объект.Ссылка) тогда
		 ДанныеПаспорта=ПаспортныеДанныеФизЛица(Объект.Ссылка);
         ПаспортСерия= ДанныеПаспорта.Серия;
		 ПаспортНомер= ДанныеПаспорта.НОмер;
		 ПаспортДатаВыдачи= ДанныеПаспорта.ДатаВыдачи;
		 ПаспортКодподразделения= ДанныеПаспорта.КодПодразделения;
		 ПаспортКемВыдан= ДанныеПаспорта.КемВыдан;
	КонецЕсли;	
КонецПроцедуры	

&НаСервере
Функция ПаспортныеДанныеФизЛица(СсылкаФизлицо)
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ВидДокумента,
		|	ДокументыФизическихЛицСрезПоследних.Серия КАК Серия,
		|	ДокументыФизическихЛицСрезПоследних.Номер КАК Номер,
		|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДатаВыдачи,
		|	ДокументыФизическихЛицСрезПоследних.СрокДействия КАК СрокДействия,
		|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК КемВыдан,
		|	ДокументыФизическихЛицСрезПоследних.КодПодразделения КАК КодПодразделения,
		|	ДокументыФизическихЛицСрезПоследних.ЯвляетсяДокументомУдостоверяющимЛичность КАК ЯвляетсяДокументомУдостоверяющимЛичность,
		|	ДокументыФизическихЛицСрезПоследних.Представление КАК Представление,
		|	ДокументыФизическихЛицСрезПоследних.Гражданство КАК Гражданство
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних КАК ДокументыФизическихЛицСрезПоследних
		|ГДЕ
		|	ДокументыФизическихЛицСрезПоследних.Физлицо = &Физлицо
		|	И ДокументыФизическихЛицСрезПоследних.ВидДокумента = &ВидДокумента";
	
	Запрос.УстановитьПараметр("Физлицо", СсылкаФизлицо);
	Запрос.УстановитьПараметр("ВидДокумента", Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ);	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	СтруктураПаспорт=ПолучитьСтруктуруИзКолонокТЗ(РезультатЗапроса); 
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	 РезультатЗапроса.Следующий(); 
	ЗаполнитьЗначенияСвойств(СтруктураПаспорт,РезультатЗапроса);
	Возврат СтруктураПаспорт;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецФункции

&НаСервере
Функция ПолучитьСтруктуруИзКолонокТЗ(ТЗ)  
	Струк=Новый Структура;
	Для Каждого Колонка из ТЗ.Колонки цикл
		Струк.Вставить(Колонка.Имя,"");
	КонецЦикла;
Возврат Струк;	

КонецФункции // ПолучитьСтруктуруИзКолонокТЗ()

&НаСервере
Процедура ОбновитьЭлементыФормы()
	ЮрФизЛицо = Объект.ЮрФизЛицо;
	Если Не ЗначениеЗаполнено(ЮрФизЛицо) тогда
		ЮрФизЛицо=Перечисления.ЮрФизЛицо.ФизЛицо;
	КонецЕсли;	
	Если (ЮрФизЛицо=Перечисления.ЮрФизЛицо.ФизЛицо)	 тогда 
		Элементы.ГруппаОбщаяФЛ.Видимость = Истина;
		Элементы.ГруппаЮЛ.Видимость = Ложь;
		Элементы.ГруппаОбщиеИП.Видимость = Ложь;			
	КонецЕсли;	
   	Если (ЮрФизЛицо=Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель)	 тогда 
		Элементы.ГруппаОбщаяФЛ.Видимость = Истина;
		Элементы.ГруппаЮЛ.Видимость = Ложь;
		Элементы.ГруппаОбщиеИП.Видимость = Истина;			
	КонецЕсли;	
       	Если (ЮрФизЛицо=Перечисления.ЮрФизЛицо.ЮрЛицо)	 тогда 
		Элементы.ГруппаОбщаяФЛ.Видимость = Ложь;
		Элементы.ГруппаЮЛ.Видимость = Истина;
		Элементы.ГруппаОбщиеИП.Видимость = ЛОжь;			
	КонецЕсли;	
    МестноеВремяДолжника=Формат(ТекущаяДата(),"ДЛФ=T");
КонецПроцедуры

&НаКлиенте
Процедура ЮрФизЛицоПриИзменении(Элемент)
	ОбновитьЭлементыФормы();

КонецПроцедуры


&НаСервере

Процедура ПеречитатьСписокНаСервере()  
	//
	Если ЗначениеЗаполнено(Объект.Ссылка) тогда
		СписокДолги.Параметры.УстановитьЗначениеПараметра("Владелец", Объект.Ссылка);
	иначе
		СписокДолги.Параметры.УстановитьЗначениеПараметра("Владелец",Неопределено);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Ссылка) тогда
		СписокПоручители.Параметры.УстановитьЗначениеПараметра("Должник", Объект.Ссылка);
	иначе
		СписокПоручители.Параметры.УстановитьЗначениеПараметра("Должник",Неопределено);
	КонецЕсли;    
	//
	Элементы.СписокАдреса.ОтборСтрок =Новый ФиксированнаяСтруктура("Тип",Перечисления.ТипыКонтактнойИнформации.Адрес ); 
	Элементы.СписокТелефоны.ОтборСтрок =Новый ФиксированнаяСтруктура("Тип",Перечисления.ТипыКонтактнойИнформации.Телефон ); 
 	Элементы.СписокЕмайл.ОтборСтрок =Новый ФиксированнаяСтруктура("Тип",Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты );
	
	//Если ЗначениеЗаполнено(Объект.Ссылка) тогда
	//	СписокПлатежи.Параметры.УстановитьЗначениеПараметра("Должник", Объект.Ссылка);
	//иначе
	//	СписокПлатежи.Параметры.УстановитьЗначениеПараметра("Должник",Неопределено);
	//КонецЕсли;

КонецПроцедуры // ПеречитатьСписокНаСервере()

&НаКлиенте
Процедура СписокДолгиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика.
	Отказ = Истина;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы = Новый Структура("Владелец", Объект.Ссылка);
        ОткрытьФорму("Справочник.Долги.Форма.ФормаЭлемента", ПараметрыФормы);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	//Вставить содержимое обработчика 
	ПроверитьОбновитьПаспортныеДанные();
КонецПроцедуры                          


&НаСервере
Процедура ПроверитьОбновитьПаспортныеДанные()
	
	     СтруктураПаспорт = НОвый Структура;
		 СтруктураПаспорт.Вставить("Номер",ПаспортНомер);
		 СтруктураПаспорт.Вставить("Серия",ПаспортСерия);
		 СтруктураПаспорт.Вставить("ДатаВыдачи",ПаспортДатаВыдачи);   
		 СтруктураПаспорт.Вставить("КодПодразделения",ПаспортКодподразделения);
		 СтруктураПаспорт.Вставить("КемВыдан",ПаспортКемВыдан);

		 ДанныеПаспорта=ПаспортныеДанныеФизЛица(Объект.Ссылка);
		 Если Не СтруктурыИдентичны(СтруктураПаспорт,ДанныеПаспорта) тогда
			 ЗаписатьНовыеПаспортныеДанные(СтруктураПаспорт,Объект.Ссылка);
		КонецЕсли;	 

	КонецПроцедуры  
	
	&НаСервере
	Процедура ЗаписатьНовыеПаспортныеДанные(СтруктураПаспорт,СсылкаФизлицо)
		Запись = РегистрыСведений.ДокументыФизическихЛиц.СоздатьМенеджерЗаписи();
		Запись.ВидДокумента=Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ;
		Запись.Физлицо=СсылкаФизлицо;
		Запись.Период=ТекущаяДата();
		ЗаполнитьЗначенияСвойств(Запись,СтруктураПаспорт);
		Запись.Записать(Истина);
		
КонецПроцедуры
	
&НаСервере	 
Функция СтруктурыИдентичны(Струк1,Струк2)
	Идентичны=Истина;
	Для Каждого Элемент из Струк1 цикл 
			ПроверяемоеСвоиство=Неопределено;
			 Если Струк2.Свойство(Элемент.Ключ,ПроверяемоеСвоиство) тогда
				 Если ПроверяемоеСвоиство<>Элемент.Значение тогда
				Идентичны=Ложь;	 
			КонецЕсли;	
		иначе
			  Идентичны=Ложь;	 
			КонецЕсли;	 
		 КонецЦикла;	 
		
	   Возврат Идентичны;
	 КонецФункции // СтруктурыИдентичны()

&НаКлиенте
	 Процедура СписокДолгиПриАктивизацииСтроки(Элемент)
		 // Вставить содержимое обработчика. 
		 Если (Элемент.ТекущиеДанные<>Неопределено) тогда
			Долг =Элемент.ТекущиеДанные.Долг;
		иначе
			Долг =Неопределено;
	     КонецЕсли;
		УстановитьОтборПоТекущемуДолгу(Долг);                                 
		УстановитьОтборПоТекущемуДолгуОбещанныйПлатеж(Долг);
	 КонецПроцедуры
	 
	 &НаСервере
	 Процедура УстановитьОтборПоТекущемуДолгу(Долг)
		 СписокПлатежи.Параметры.УстановитьЗначениеПараметра("Долг", Долг);
	 КонецПроцедуры 
	 
	 &НаСервере
	  Процедура УстановитьОтборПоТекущемуДолгуОбещанныйПлатеж(Долг)
		 СписокОбещание.Параметры.УстановитьЗначениеПараметра("Долг", Долг);
	 КонецПроцедуры 

&НаКлиенте
		Процедура ДобавитьПлатеж(Команда)
			// Вставить содержимое обработчика.
			ДолгиТекущаяСтрока = Элементы.СписокДолги.ТекущиеДанные;
			 Если (ДолгиТекущаяСтрока<>Неопределено) тогда
			Долг =ДолгиТекущаяСтрока.Долг;
		иначе
			Долг =Неопределено;
	     КонецЕсли;

			ПараметрыПлатежа =Новый Структура;
			ПараметрыПлатежа.Вставить("Плательщик",Объект.Ссылка);
			ПараметрыПлатежа.Вставить("Долг",Долг);
			ПараметрыПлатежа.Вставить("ДатаПлатежа",ТекущаяДата());
			ОткрытьФорму("Документ.Платеж.Форма.ФормаДокументаОднострочная",ПараметрыПлатежа);
		КонецПроцедуры

&НаКлиенте
		Процедура ДобавитьОбещанныйПлатеж(Команда)
						// Вставить содержимое обработчика.
			ДолгиТекущаяСтрока = Элементы.СписокДолги.ТекущиеДанные;
			 Если (ДолгиТекущаяСтрока<>Неопределено) тогда
			Долг =ДолгиТекущаяСтрока.Долг;
		иначе
			Долг =Неопределено;
	     КонецЕсли;

			ПараметрыПлатежа =Новый Структура;
			ПараметрыПлатежа.Вставить("Плательщик",Объект.Ссылка);
			ПараметрыПлатежа.Вставить("Долг",Долг);
			ПараметрыПлатежа.Вставить("ДатаОбещанногоПлатежа",ТекущаяДата()+7*60*60*24);
			ОткрытьФорму("Документ.ОбещанныйПлатеж.Форма.ФормаДокумента",ПараметрыПлатежа);

		КонецПроцедуры

&НаКлиенте
		Процедура СписокАдресаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
			// Вставить содержимое обработчика.     
			Отказ=Истина;
				ПараметрыОткрытия=Новый Структура;
		    ПараметрыОткрытия.Вставить("Владелец",Объект.Ссылка);
 
			ПараметрыОткрытия.Вставить("СписокВыбораАдреса",СписокВидовАдресов());
			//ПараметрыОткрытия.Вставить("ВидАдреса",Элемент.ТекущиеДанные.Вид);
			//ПараметрыОткрытия.Вставить("Адрес",Элемент.ТекущиеДанные.Представление); 
			//ПараметрыОткрытия.Вставить("Значение",Элемент.ТекущиеДанные.Значение);
			
			ДопПараметры=Новый Структура;
			ДопПараметры.Вставить("Владелец",Элемент);
			Оповещение= НОвый ОписаниеОповещения("ОбработатьДобавлениеАдреса",ЭтотОбъект,ДопПараметры); 
			ОткрытьФорму("Обработка.РасширенныйВводКонтактнойИнформации.Форма.ФормаВводАдресаВидАдреса",ПараметрыОткрытия,Элемент,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
		КонецПроцедуры

&НаКлиенте
		Процедура СписокАдресаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
			// Вставить содержимое обработчика.
			СтандартнаяОбработка=Ложь;   
			Если Элемент.ТекущиеДанные<>Неопределено тогда
			ПараметрыОткрытия=Новый Структура;
		    ПараметрыОткрытия.Вставить("Владелец",Объект.Ссылка);
 
			ПараметрыОткрытия.Вставить("СписокВыбораАдреса",СписокВидовАдресов());
			ПараметрыОткрытия.Вставить("ВидАдреса",Элемент.ТекущиеДанные.Вид);
			ПараметрыОткрытия.Вставить("Адрес",Элемент.ТекущиеДанные.Представление); 
			ПараметрыОткрытия.Вставить("Значение",Элемент.ТекущиеДанные.Значение);
			
			ДопПараметры=Новый Структура;
			ДопПараметры.Вставить("Владелец",Элемент);
			Оповещение= НОвый ОписаниеОповещения("ОбработатьВыборАдреса",ЭтотОбъект,ДопПараметры); 
			ОткрытьФорму("Обработка.РасширенныйВводКонтактнойИнформации.Форма.ФормаВводАдресаВидАдреса",ПараметрыОткрытия,Элемент,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
		КонецПроцедуры
		
		
		 &НаСервере
		 Функция СписокВидовАдресов()  
			 	СписокВыбораАдреса=НОвый Массив;
			СписокВыбораАдреса.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресДолжника);	
			СписокВыбораАдреса.Добавить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресДолжника); 
			СписокВыбораАдреса.Добавить(Справочники.ВидыКонтактнойИнформации.РегистрацииАдресДолжника); 
			СписокВыбораАдреса.Добавить(Справочники.ВидыКонтактнойИнформации.РабочийАдресДолжника); 
			СписокВыбораАдреса.Добавить(Справочники.ВидыКонтактнойИнформации.МестонахожденияАдресДолжника); 

			Возврат СписокВыбораАдреса;
		КонецФункции
				 &НаСервере
		Функция СписокВидовТелефонов()  
			 	СписокВыбораТелефона=НОвый Массив;
			СписокВыбораТелефона.Добавить(Справочники.ВидыКонтактнойИнформации.МобильныйТелефонДолжника);	
			СписокВыбораТелефона.Добавить(Справочники.ВидыКонтактнойИнформации.РабочийТелефонДолжника); 
		    СписокВыбораТелефона.Добавить(Справочники.ВидыКонтактнойИнформации.ДомашнийТелефонДолжника); 
			Возврат СписокВыбораТелефона;
		КонецФункции	

 &НаКлиенте
 Процедура ОбработатьВыборАдреса(Результат,ДопПарметры) Экспорт  
	Если Результат<>Неопределено тогда
		//если ДопПарметры.Владелец  
		Ст =ДопПарметры.Владелец.ТекущиеДанные;
		Ст.Представление =Результат.Адрес;
		Ст.Значение=Результат.ЗначениеАдреса;
	
	КонецЕсли;
	ПроверитьАдрес();
  
КонецПроцедуры	

 &НаКлиенте
 Процедура ОбработатьДобавлениеАдреса(Результат,ДопПарметры) Экспорт  
	 Если Результат<>Неопределено тогда   
           ДобавитьНовыйАдрес(Результат);	
	КонецЕсли;  
КонецПроцедуры

 &НаКлиенте
 Процедура ОбработатьДобавлениеТелефона(Результат,ДопПарметры) Экспорт  
	 Если Результат<>Неопределено тогда   
           ДобавитьНовыйТелефон(Результат);	
	КонецЕсли;  
КонецПроцедуры


&НаСервере
Процедура  ДобавитьНовыйАдрес(СтруктураАдреса)
	 	 НоваяСт=Объект.КонтактнаяИнформация.Добавить();
		 НоваяСт.Тип=Перечисления.ТипыКонтактнойИнформации.Адрес;
		 НоваяСт.Вид=СтруктураАдреса.ВидАдреса;
         НоваяСт.Значение=СтруктураАдреса.ЗначениеАдреса;
         НоваяСт.Представление = СтруктураАдреса.Адрес;
КонецПроцедуры	

&НаСервере
Процедура  ДобавитьНовыйТелефон(СтруктураТелефона)
	 	 НоваяСт=Объект.КонтактнаяИнформация.Добавить();
		 НоваяСт.Тип=Перечисления.ТипыКонтактнойИнформации.Телефон;
		 НоваяСт.Вид=СтруктураТелефона.ВидТелефона;
         НоваяСт.Значение=СтруктураТелефона.ЗначениеТелефона;
         НоваяСт.Представление = СтруктураТелефона.Телефон;
КонецПроцедуры	

&НаКлиенте
Процедура СписокТелефоныПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика.     
			Отказ=Истина;
			ПараметрыОткрытия=Новый Структура;
		    ПараметрыОткрытия.Вставить("Владелец",Объект.Ссылка);
 
			ПараметрыОткрытия.Вставить("СписокВыбораТелефона",СписокВидовТелефонов());
			ДопПараметры=Новый Структура;
			ДопПараметры.Вставить("Владелец",Элемент);
			Оповещение= НОвый ОписаниеОповещения("ОбработатьДобавлениеТелефона",ЭтотОбъект,ДопПараметры); 
			ОткрытьФорму("Обработка.РасширенныйВводКонтактнойИнформации.Форма.ФормаВводТелефона",ПараметрыОткрытия,Элемент,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
		
КонецПроцедуры

&НаКлиенте
Процедура СписокТелефоныВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Вставить содержимое обработчика.   
		СтандартнаяОбработка=Ложь;   
			Если Элемент.ТекущиеДанные<>Неопределено тогда
			ПараметрыОткрытия=Новый Структура;
		    ПараметрыОткрытия.Вставить("Владелец",Объект.Ссылка);
 
			ПараметрыОткрытия.Вставить("СписокВыбораТелефона",СписокВидовТелефонов());
			ПараметрыОткрытия.Вставить("ВидТелефона",Элемент.ТекущиеДанные.Вид);
			ПараметрыОткрытия.Вставить("Телефон",Элемент.ТекущиеДанные.Представление); 
			ПараметрыОткрытия.Вставить("Значение",Элемент.ТекущиеДанные.Значение);
			
			ДопПараметры=Новый Структура;
			ДопПараметры.Вставить("Владелец",Элемент);
			Оповещение= НОвый ОписаниеОповещения("ОбработатьИзменениеТелефона",ЭтотОбъект,ДопПараметры); 
			ОткрытьФорму("Обработка.РасширенныйВводКонтактнойИнформации.Форма.ФормаВводТелефона",ПараметрыОткрытия,Элемент,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;

КонецПроцедуры
	  
  &НаКлиенте
 Процедура ОбработатьИзменениеТелефона(Результат,ДопПарметры) Экспорт  
	Если Результат<>Неопределено тогда
		//если ДопПарметры.Владелец  
		Ст =ДопПарметры.Владелец.ТекущиеДанные;
		Ст.Представление =Результат.Телефон;
		Ст.Значение=Результат.ЗначениеТелефона;
	   	Ст.Вид=Результат.ВидТелефона;
	КонецЕсли;
	  
КонецПроцедуры	

&НаКлиенте
Процедура СписокЕмайлПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика. 
	//Сообщить(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СписокЕмайлПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	// Вставить содержимое обработчика.
	Элемент.ТекущиеДанные.Тип=ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты");
КонецПроцедуры

&НаКлиенте
Процедура СоцсетиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика. 
			Отказ=Истина;
					ДопПараметры=Новый Структура;

			Оповещение= НОвый ОписаниеОповещения("ОбработатьДобавлениеСоцсети",ЭтотОбъект,ДопПараметры); 
			ОткрытьФорму("Обработка.РасширенныйВводКонтактнойИнформации.Форма.ФормаВводСоцсети",Новый Структура("ПараметрыЗаполнения",ПолучитьСтруктуруПараметровСоцСети()),Элемент,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
		

		КонецПроцедуры   


&НаСервере		
Функция ПолучитьСтруктуруПараметровСоцСети()
	  	
		    НоваяСтрокаСоцСети=Объект.Соцсети.Выгрузить().Добавить();
			ПараметрыОткрытия = ОбщийМодульПользовательский.СтрокаТаблицыЗначенийВСтруктуру(НоваяСтрокаСоцСети);
			ПараметрыОткрытия.Вставить("Должник",Объект.Ссылка); 
			ПараметрыОткрытия.Вставить("ВидМедиаРесурса",Перечисления.ВидМедиаРесурса.Соцсеть);
Возврат ПараметрыОткрытия;
КонецФункции

&НаСервере		
Функция ПолучитьСтруктуруПараметровМессенджер()
	  	
		    НоваяСтрокаМессенджер=Объект.Мессенджеры.Выгрузить().Добавить();
			ПараметрыОткрытия = ОбщийМодульПользовательский.СтрокаТаблицыЗначенийВСтруктуру(НоваяСтрокаМессенджер);
			ПараметрыОткрытия.Вставить("Должник",Объект.Ссылка); 
			ПараметрыОткрытия.Вставить("ВидМедиаРесурса",Перечисления.ВидМедиаРесурса.Мессенджер);
Возврат ПараметрыОткрытия;
КонецФункции
